#[cfg(windows)]
compile_error!("onload does not support windows platform");

/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const EF_VI_DMA_ALIGN: u32 = 64;
pub const EF_VI_MAX_QS: u32 = 32;
pub const EF_VI_EVENT_POLL_MIN_EVS: u32 = 2;
pub const EF_VI_MAX_EFCT_RXQS: u32 = 8;
pub const EF_REQUEST_ID_MASK: u32 = 4294967295;
pub const EF_VI_TX_TS_FRAC_NS_BITS: u32 = 4;
pub const EF_EVENT_FLAG_SOP: u32 = 1;
pub const EF_EVENT_FLAG_CONT: u32 = 2;
pub const EF_EVENT_FLAG_ISCSI_OK: u32 = 4;
pub const EF_EVENT_FLAG_MULTICAST: u32 = 8;
pub const EF_EVENT_FLAG_PS_NEXT_BUFFER: u32 = 16;
pub const EF_EVENT_FLAG_CTPIO: u32 = 1;
pub const EF_VI_SYNC_FLAG_CLOCK_SET: u32 = 1;
pub const EF_VI_SYNC_FLAG_CLOCK_IN_SYNC: u32 = 2;
pub const EF_EVENT_TX_WITH_TIMESTAMP_SYNC_MASK: u32 = 3;
pub const EF_EVENT_SW_DATA_MASK: u32 = 65535;
pub const EF_EVENT_FMT: &[u8; 8] = b"[ev:%x]\0";
pub const EF_RIOV_FLAG_TRANSLATE_ADDR: u32 = 1;
pub const EF_VI_RECEIVE_BATCH: u32 = 15;
pub const EF_VI_TRANSMIT_BATCH: u32 = 64;
pub const EF_VI_CTPIO_CT_THRESHOLD_SNF: u32 = 65535;
pub const EF_VI_NIC_PAGE_SHIFT: u32 = 12;
pub const EF_VI_NIC_PAGE_SIZE: u32 = 4096;
pub const EF_PD_VLAN_NONE: i32 = -1;
pub const EF_VI_CONFIG_PIO: u32 = 1;
pub const ZF_CACHE_LINE_SIZE: u32 = 64;
pub const ZF_FLEXIBLE_ARRAY_COUNT: u32 = 0;
pub const _SYS_EPOLL_H: u32 = 1;
pub const EPOLL_CTL_ADD: u32 = 1;
pub const EPOLL_CTL_DEL: u32 = 2;
pub const EPOLL_CTL_MOD: u32 = 3;
pub const ZF_EPOLLIN_OVERLAPPED: u32 = 65536;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __NETINET_IP_H: u32 = 1;
pub const IP_RF: u32 = 32768;
pub const IP_DF: u32 = 16384;
pub const IP_MF: u32 = 8192;
pub const IP_OFFMASK: u32 = 8191;
pub const IPVERSION: u32 = 4;
pub const IP_MAXPACKET: u32 = 65535;
pub const IPTOS_ECN_MASK: u32 = 3;
pub const IPTOS_ECN_NOT_ECT: u32 = 0;
pub const IPTOS_ECN_ECT1: u32 = 1;
pub const IPTOS_ECN_ECT0: u32 = 2;
pub const IPTOS_ECN_CE: u32 = 3;
pub const IPTOS_DSCP_MASK: u32 = 252;
pub const IPTOS_DSCP_AF11: u32 = 40;
pub const IPTOS_DSCP_AF12: u32 = 48;
pub const IPTOS_DSCP_AF13: u32 = 56;
pub const IPTOS_DSCP_AF21: u32 = 72;
pub const IPTOS_DSCP_AF22: u32 = 80;
pub const IPTOS_DSCP_AF23: u32 = 88;
pub const IPTOS_DSCP_AF31: u32 = 104;
pub const IPTOS_DSCP_AF32: u32 = 112;
pub const IPTOS_DSCP_AF33: u32 = 120;
pub const IPTOS_DSCP_AF41: u32 = 136;
pub const IPTOS_DSCP_AF42: u32 = 144;
pub const IPTOS_DSCP_AF43: u32 = 152;
pub const IPTOS_DSCP_EF: u32 = 184;
pub const IPTOS_CLASS_MASK: u32 = 224;
pub const IPTOS_CLASS_CS0: u32 = 0;
pub const IPTOS_CLASS_CS1: u32 = 32;
pub const IPTOS_CLASS_CS2: u32 = 64;
pub const IPTOS_CLASS_CS3: u32 = 96;
pub const IPTOS_CLASS_CS4: u32 = 128;
pub const IPTOS_CLASS_CS5: u32 = 160;
pub const IPTOS_CLASS_CS6: u32 = 192;
pub const IPTOS_CLASS_CS7: u32 = 224;
pub const IPTOS_CLASS_DEFAULT: u32 = 0;
pub const IPTOS_TOS_MASK: u32 = 30;
pub const IPTOS_LOWDELAY: u32 = 16;
pub const IPTOS_THROUGHPUT: u32 = 8;
pub const IPTOS_RELIABILITY: u32 = 4;
pub const IPTOS_LOWCOST: u32 = 2;
pub const IPTOS_MINCOST: u32 = 2;
pub const IPTOS_PREC_MASK: u32 = 224;
pub const IPTOS_PREC_NETCONTROL: u32 = 224;
pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
pub const IPTOS_PREC_FLASH: u32 = 96;
pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
pub const IPTOS_PREC_PRIORITY: u32 = 32;
pub const IPTOS_PREC_ROUTINE: u32 = 0;
pub const IPOPT_COPY: u32 = 128;
pub const IPOPT_CLASS_MASK: u32 = 96;
pub const IPOPT_NUMBER_MASK: u32 = 31;
pub const IPOPT_CONTROL: u32 = 0;
pub const IPOPT_RESERVED1: u32 = 32;
pub const IPOPT_DEBMEAS: u32 = 64;
pub const IPOPT_MEASUREMENT: u32 = 64;
pub const IPOPT_RESERVED2: u32 = 96;
pub const IPOPT_EOL: u32 = 0;
pub const IPOPT_END: u32 = 0;
pub const IPOPT_NOP: u32 = 1;
pub const IPOPT_NOOP: u32 = 1;
pub const IPOPT_RR: u32 = 7;
pub const IPOPT_TS: u32 = 68;
pub const IPOPT_TIMESTAMP: u32 = 68;
pub const IPOPT_SECURITY: u32 = 130;
pub const IPOPT_SEC: u32 = 130;
pub const IPOPT_LSRR: u32 = 131;
pub const IPOPT_SATID: u32 = 136;
pub const IPOPT_SID: u32 = 136;
pub const IPOPT_SSRR: u32 = 137;
pub const IPOPT_RA: u32 = 148;
pub const IPOPT_OPTVAL: u32 = 0;
pub const IPOPT_OLEN: u32 = 1;
pub const IPOPT_OFFSET: u32 = 2;
pub const IPOPT_MINOFF: u32 = 4;
pub const MAX_IPOPTLEN: u32 = 40;
pub const IPOPT_TS_TSONLY: u32 = 0;
pub const IPOPT_TS_TSANDADDR: u32 = 1;
pub const IPOPT_TS_PRESPEC: u32 = 3;
pub const IPOPT_SECUR_UNCLASS: u32 = 0;
pub const IPOPT_SECUR_CONFID: u32 = 61749;
pub const IPOPT_SECUR_EFTO: u32 = 30874;
pub const IPOPT_SECUR_MMMM: u32 = 48205;
pub const IPOPT_SECUR_RESTR: u32 = 44819;
pub const IPOPT_SECUR_SECRET: u32 = 55176;
pub const IPOPT_SECUR_TOPSECRET: u32 = 27589;
pub const MAXTTL: u32 = 255;
pub const IPDEFTTL: u32 = 64;
pub const IPFRAGTTL: u32 = 60;
pub const IPTTLDEC: u32 = 1;
pub const IP_MSS: u32 = 576;
pub const __NETINET_UDP_H: u32 = 1;
pub const UDP_CORK: u32 = 1;
pub const UDP_ENCAP: u32 = 100;
pub const UDP_NO_CHECK6_TX: u32 = 101;
pub const UDP_NO_CHECK6_RX: u32 = 102;
pub const UDP_SEGMENT: u32 = 103;
pub const UDP_GRO: u32 = 104;
pub const UDP_ENCAP_ESPINUDP_NON_IKE: u32 = 1;
pub const UDP_ENCAP_ESPINUDP: u32 = 2;
pub const UDP_ENCAP_L2TPINUDP: u32 = 3;
pub const UDP_ENCAP_GTP0: u32 = 4;
pub const UDP_ENCAP_GTP1U: u32 = 5;
pub const SOL_UDP: u32 = 17;
pub const _ASSERT_H: u32 = 1;
pub const ZFUT_FLAG_DONT_FRAGMENT: u32 = 16384;
pub const ZF_PKT_REPORT_CLOCK_SET: u32 = 1;
pub const ZF_PKT_REPORT_IN_SYNC: u32 = 2;
pub const ZF_PKT_REPORT_NO_TIMESTAMP: u32 = 4;
pub const ZF_PKT_REPORT_DROPPED: u32 = 8;
pub const ZF_PKT_REPORT_TCP_RETRANS: u32 = 8192;
pub const ZF_PKT_REPORT_TCP_SYN: u32 = 16384;
pub const ZF_PKT_REPORT_TCP_FIN: u32 = 32768;
pub const ZF_DELEGATED_SEND_RC_FATAL: u32 = 128;
pub const TCP_OFFSET_SEQ_TO_FLAGS: u32 = 9;
pub const TCP_FLAG_PSH: u32 = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __glibc_unused___g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1::__wseq32"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1, __wseq32) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_2"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_2"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2, __g1_start) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2::__g1_start32"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2, __g1_start32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__glibc_unused___g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __glibc_unused___g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
unsafe extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type ef_driver_handle = ::std::os::raw::c_int;
pub type ef_eventq_ptr = u32;
pub type ef_addr = u64;
pub type ef_vi_ioaddr_t = *mut ::std::os::raw::c_char;
pub type ef_addrspace = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efab_nic_design_parameters {
    _unused: [u8; 0],
}
pub type ef_request_id = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ef_event {
    pub generic: ef_event__bindgen_ty_1,
    pub rx: ef_event__bindgen_ty_2,
    pub rx_discard: ef_event__bindgen_ty_3,
    pub tx: ef_event__bindgen_ty_4,
    pub tx_error: ef_event__bindgen_ty_5,
    pub tx_timestamp: ef_event__bindgen_ty_6,
    pub tx_alt: ef_event__bindgen_ty_7,
    pub rx_no_desc_trunc: ef_event__bindgen_ty_8,
    pub rx_packed_stream: ef_event__bindgen_ty_9,
    pub sw: ef_event__bindgen_ty_10,
    pub rx_multi: ef_event__bindgen_ty_11,
    pub rx_multi_discard: ef_event__bindgen_ty_12,
    pub rx_multi_pkts: ef_event__bindgen_ty_13,
    pub rx_ref: ef_event__bindgen_ty_14,
    pub rx_ref_discard: ef_event__bindgen_ty_15,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_1"][::std::mem::size_of::<ef_event__bindgen_ty_1>() - 4usize];
    ["Alignment of ef_event__bindgen_ty_1"]
        [::std::mem::align_of::<ef_event__bindgen_ty_1>() - 4usize];
};
impl ef_event__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_2 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 14usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_2"][::std::mem::size_of::<ef_event__bindgen_ty_2>() - 16usize];
    ["Alignment of ef_event__bindgen_ty_2"]
        [::std::mem::align_of::<ef_event__bindgen_ty_2>() - 4usize];
};
impl ef_event__bindgen_ty_2 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rq_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_rq_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rq_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                32u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_rq_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn len_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_len_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                80usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                80usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ofs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_ofs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ofs_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                96usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ofs_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                96usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        rq_id: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        ofs: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 14usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 14usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let rq_id: u32 = unsafe { ::std::mem::transmute(rq_id) };
            rq_id as u64
        });
        __bindgen_bitfield_unit.set(64usize, 16u8, {
            let len: u32 = unsafe { ::std::mem::transmute(len) };
            len as u64
        });
        __bindgen_bitfield_unit.set(80usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(96usize, 16u8, {
            let ofs: u32 = unsafe { ::std::mem::transmute(ofs) };
            ofs as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_3 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 14usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_3"][::std::mem::size_of::<ef_event__bindgen_ty_3>() - 16usize];
    ["Alignment of ef_event__bindgen_ty_3"]
        [::std::mem::align_of::<ef_event__bindgen_ty_3>() - 4usize];
};
impl ef_event__bindgen_ty_3 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rq_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_rq_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rq_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                32u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_rq_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn len_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_len_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                80usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                80usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subtype(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_subtype(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subtype_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                96usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_subtype_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                96usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        rq_id: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        subtype: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 14usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 14usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let rq_id: u32 = unsafe { ::std::mem::transmute(rq_id) };
            rq_id as u64
        });
        __bindgen_bitfield_unit.set(64usize, 16u8, {
            let len: u32 = unsafe { ::std::mem::transmute(len) };
            len as u64
        });
        __bindgen_bitfield_unit.set(80usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(96usize, 16u8, {
            let subtype: u32 = unsafe { ::std::mem::transmute(subtype) };
            subtype as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_4 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_4"][::std::mem::size_of::<ef_event__bindgen_ty_4>() - 8usize];
    ["Alignment of ef_event__bindgen_ty_4"]
        [::std::mem::align_of::<ef_event__bindgen_ty_4>() - 4usize];
};
impl ef_event__bindgen_ty_4 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn desc_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_desc_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn desc_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_desc_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        desc_id: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let desc_id: u32 = unsafe { ::std::mem::transmute(desc_id) };
            desc_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_5 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_5"][::std::mem::size_of::<ef_event__bindgen_ty_5>() - 8usize];
    ["Alignment of ef_event__bindgen_ty_5"]
        [::std::mem::align_of::<ef_event__bindgen_ty_5>() - 4usize];
};
impl ef_event__bindgen_ty_5 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn desc_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_desc_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn desc_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_desc_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subtype(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_subtype(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subtype_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_subtype_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        desc_id: ::std::os::raw::c_uint,
        subtype: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let desc_id: u32 = unsafe { ::std::mem::transmute(desc_id) };
            desc_id as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let subtype: u32 = unsafe { ::std::mem::transmute(subtype) };
            subtype as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_6 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_6"][::std::mem::size_of::<ef_event__bindgen_ty_6>() - 16usize];
    ["Alignment of ef_event__bindgen_ty_6"]
        [::std::mem::align_of::<ef_event__bindgen_ty_6>() - 4usize];
};
impl ef_event__bindgen_ty_6 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ts_nsec_frac(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ts_nsec_frac(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ts_nsec_frac_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ts_nsec_frac_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rq_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_rq_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rq_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                32u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_rq_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ts_sec(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_ts_sec(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ts_sec_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                32u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ts_sec_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ts_nsec(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_ts_nsec(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ts_nsec_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                96usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ts_nsec_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                96usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ts_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(126usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ts_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(126usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ts_flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                126usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ts_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                126usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        ts_nsec_frac: ::std::os::raw::c_uint,
        rq_id: ::std::os::raw::c_uint,
        ts_sec: ::std::os::raw::c_uint,
        ts_nsec: ::std::os::raw::c_uint,
        ts_flags: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let ts_nsec_frac: u32 = unsafe { ::std::mem::transmute(ts_nsec_frac) };
            ts_nsec_frac as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let rq_id: u32 = unsafe { ::std::mem::transmute(rq_id) };
            rq_id as u64
        });
        __bindgen_bitfield_unit.set(64usize, 32u8, {
            let ts_sec: u32 = unsafe { ::std::mem::transmute(ts_sec) };
            ts_sec as u64
        });
        __bindgen_bitfield_unit.set(96usize, 30u8, {
            let ts_nsec: u32 = unsafe { ::std::mem::transmute(ts_nsec) };
            ts_nsec as u64
        });
        __bindgen_bitfield_unit.set(126usize, 2u8, {
            let ts_flags: u32 = unsafe { ::std::mem::transmute(ts_flags) };
            ts_flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_7 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_7"][::std::mem::size_of::<ef_event__bindgen_ty_7>() - 8usize];
    ["Alignment of ef_event__bindgen_ty_7"]
        [::std::mem::align_of::<ef_event__bindgen_ty_7>() - 4usize];
};
impl ef_event__bindgen_ty_7 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn alt_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_alt_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn alt_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 6usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_alt_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 6usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        alt_id: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let alt_id: u32 = unsafe { ::std::mem::transmute(alt_id) };
            alt_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_8 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_8"][::std::mem::size_of::<ef_event__bindgen_ty_8>() - 4usize];
    ["Alignment of ef_event__bindgen_ty_8"]
        [::std::mem::align_of::<ef_event__bindgen_ty_8>() - 4usize];
};
impl ef_event__bindgen_ty_8 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_9 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 9usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_9"][::std::mem::size_of::<ef_event__bindgen_ty_9>() - 12usize];
    ["Alignment of ef_event__bindgen_ty_9"]
        [::std::mem::align_of::<ef_event__bindgen_ty_9>() - 4usize];
};
impl ef_event__bindgen_ty_9 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn n_pkts(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_n_pkts(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn n_pkts_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_n_pkts_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ps_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ps_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ps_flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 9usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ps_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 9usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        n_pkts: ::std::os::raw::c_uint,
        ps_flags: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 9usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 9usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let n_pkts: u32 = unsafe { ::std::mem::transmute(n_pkts) };
            n_pkts as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let ps_flags: u32 = unsafe { ::std::mem::transmute(ps_flags) };
            ps_flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_10 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub data: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_10"][::std::mem::size_of::<ef_event__bindgen_ty_10>() - 8usize];
    ["Alignment of ef_event__bindgen_ty_10"]
        [::std::mem::align_of::<ef_event__bindgen_ty_10>() - 4usize];
    ["Offset of field: ef_event__bindgen_ty_10::data"]
        [::std::mem::offset_of!(ef_event__bindgen_ty_10, data) - 4usize];
};
impl ef_event__bindgen_ty_10 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_11 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_11"][::std::mem::size_of::<ef_event__bindgen_ty_11>() - 8usize];
    ["Alignment of ef_event__bindgen_ty_11"]
        [::std::mem::align_of::<ef_event__bindgen_ty_11>() - 4usize];
};
impl ef_event__bindgen_ty_11 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn n_descs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_n_descs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn n_descs_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_n_descs_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        n_descs: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let n_descs: u32 = unsafe { ::std::mem::transmute(n_descs) };
            n_descs as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_12 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 10usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_12"][::std::mem::size_of::<ef_event__bindgen_ty_12>() - 12usize];
    ["Alignment of ef_event__bindgen_ty_12"]
        [::std::mem::align_of::<ef_event__bindgen_ty_12>() - 4usize];
};
impl ef_event__bindgen_ty_12 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 10usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 10usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 10usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 10usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 10usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 10usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn n_descs(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_n_descs(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn n_descs_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 10usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_n_descs_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 10usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 10usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 10usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subtype(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_subtype(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subtype_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 10usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_subtype_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 10usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        n_descs: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        subtype: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 10usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 10usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let n_descs: u32 = unsafe { ::std::mem::transmute(n_descs) };
            n_descs as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(64usize, 16u8, {
            let subtype: u32 = unsafe { ::std::mem::transmute(subtype) };
            subtype as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_13 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_13"][::std::mem::size_of::<ef_event__bindgen_ty_13>() - 8usize];
    ["Alignment of ef_event__bindgen_ty_13"]
        [::std::mem::align_of::<ef_event__bindgen_ty_13>() - 4usize];
};
impl ef_event__bindgen_ty_13 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn __reserved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn __reserved_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set___reserved_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn n_pkts(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_n_pkts(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn n_pkts_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_n_pkts_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        __reserved: ::std::os::raw::c_uint,
        n_pkts: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let n_pkts: u32 = unsafe { ::std::mem::transmute(n_pkts) };
            n_pkts as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_14 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_14"][::std::mem::size_of::<ef_event__bindgen_ty_14>() - 12usize];
    ["Alignment of ef_event__bindgen_ty_14"]
        [::std::mem::align_of::<ef_event__bindgen_ty_14>() - 4usize];
};
impl ef_event__bindgen_ty_14 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn len_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_len_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pkt_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_pkt_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pkt_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                32u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pkt_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn filter_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_filter_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn filter_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                72usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_filter_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                72usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn user(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(88usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_user(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(88usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn user_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                88usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_user_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                88usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
        pkt_id: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        filter_id: ::std::os::raw::c_uint,
        user: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let len: u32 = unsafe { ::std::mem::transmute(len) };
            len as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let pkt_id: u32 = unsafe { ::std::mem::transmute(pkt_id) };
            pkt_id as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(72usize, 16u8, {
            let filter_id: u32 = unsafe { ::std::mem::transmute(filter_id) };
            filter_id as u64
        });
        __bindgen_bitfield_unit.set(88usize, 8u8, {
            let user: u32 = unsafe { ::std::mem::transmute(user) };
            user as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_event__bindgen_ty_15 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 14usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event__bindgen_ty_15"][::std::mem::size_of::<ef_event__bindgen_ty_15>() - 16usize];
    ["Alignment of ef_event__bindgen_ty_15"]
        [::std::mem::align_of::<ef_event__bindgen_ty_15>() - 4usize];
};
impl ef_event__bindgen_ty_15 {
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn type__raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_type_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn len(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_len(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn len_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_len_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pkt_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_pkt_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pkt_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                32u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pkt_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn q_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_q_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn q_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_q_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn filter_id(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_filter_id(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn filter_id_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                72usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_filter_id_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                72usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn user(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(88usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_user(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(88usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn user_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                88usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_user_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                88usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 14usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                96usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 14usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                96usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
        pkt_id: ::std::os::raw::c_uint,
        q_id: ::std::os::raw::c_uint,
        filter_id: ::std::os::raw::c_uint,
        user: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 14usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 14usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let len: u32 = unsafe { ::std::mem::transmute(len) };
            len as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let pkt_id: u32 = unsafe { ::std::mem::transmute(pkt_id) };
            pkt_id as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let q_id: u32 = unsafe { ::std::mem::transmute(q_id) };
            q_id as u64
        });
        __bindgen_bitfield_unit.set(72usize, 16u8, {
            let filter_id: u32 = unsafe { ::std::mem::transmute(filter_id) };
            filter_id as u64
        });
        __bindgen_bitfield_unit.set(88usize, 8u8, {
            let user: u32 = unsafe { ::std::mem::transmute(user) };
            user as u64
        });
        __bindgen_bitfield_unit.set(96usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_event"][::std::mem::size_of::<ef_event>() - 16usize];
    ["Alignment of ef_event"][::std::mem::align_of::<ef_event>() - 4usize];
    ["Offset of field: ef_event::generic"][::std::mem::offset_of!(ef_event, generic) - 0usize];
    ["Offset of field: ef_event::rx"][::std::mem::offset_of!(ef_event, rx) - 0usize];
    ["Offset of field: ef_event::rx_discard"]
        [::std::mem::offset_of!(ef_event, rx_discard) - 0usize];
    ["Offset of field: ef_event::tx"][::std::mem::offset_of!(ef_event, tx) - 0usize];
    ["Offset of field: ef_event::tx_error"][::std::mem::offset_of!(ef_event, tx_error) - 0usize];
    ["Offset of field: ef_event::tx_timestamp"]
        [::std::mem::offset_of!(ef_event, tx_timestamp) - 0usize];
    ["Offset of field: ef_event::tx_alt"][::std::mem::offset_of!(ef_event, tx_alt) - 0usize];
    ["Offset of field: ef_event::rx_no_desc_trunc"]
        [::std::mem::offset_of!(ef_event, rx_no_desc_trunc) - 0usize];
    ["Offset of field: ef_event::rx_packed_stream"]
        [::std::mem::offset_of!(ef_event, rx_packed_stream) - 0usize];
    ["Offset of field: ef_event::sw"][::std::mem::offset_of!(ef_event, sw) - 0usize];
    ["Offset of field: ef_event::rx_multi"][::std::mem::offset_of!(ef_event, rx_multi) - 0usize];
    ["Offset of field: ef_event::rx_multi_discard"]
        [::std::mem::offset_of!(ef_event, rx_multi_discard) - 0usize];
    ["Offset of field: ef_event::rx_multi_pkts"]
        [::std::mem::offset_of!(ef_event, rx_multi_pkts) - 0usize];
    ["Offset of field: ef_event::rx_ref"][::std::mem::offset_of!(ef_event, rx_ref) - 0usize];
    ["Offset of field: ef_event::rx_ref_discard"]
        [::std::mem::offset_of!(ef_event, rx_ref_discard) - 0usize];
};
pub const EF_EVENT_TYPE_RX: _bindgen_ty_1 = 0;
pub const EF_EVENT_TYPE_TX: _bindgen_ty_1 = 1;
pub const EF_EVENT_TYPE_RX_DISCARD: _bindgen_ty_1 = 2;
pub const EF_EVENT_TYPE_TX_ERROR: _bindgen_ty_1 = 3;
pub const EF_EVENT_TYPE_RX_NO_DESC_TRUNC: _bindgen_ty_1 = 4;
pub const EF_EVENT_TYPE_SW: _bindgen_ty_1 = 5;
pub const EF_EVENT_TYPE_OFLOW: _bindgen_ty_1 = 6;
pub const EF_EVENT_TYPE_TX_WITH_TIMESTAMP: _bindgen_ty_1 = 7;
pub const EF_EVENT_TYPE_RX_PACKED_STREAM: _bindgen_ty_1 = 8;
pub const EF_EVENT_TYPE_RX_MULTI: _bindgen_ty_1 = 9;
pub const EF_EVENT_TYPE_TX_ALT: _bindgen_ty_1 = 10;
pub const EF_EVENT_TYPE_RX_MULTI_DISCARD: _bindgen_ty_1 = 11;
pub const EF_EVENT_TYPE_RESET: _bindgen_ty_1 = 12;
pub const EF_EVENT_TYPE_RX_MULTI_PKTS: _bindgen_ty_1 = 13;
pub const EF_EVENT_TYPE_RX_REF: _bindgen_ty_1 = 14;
pub const EF_EVENT_TYPE_RX_REF_DISCARD: _bindgen_ty_1 = 15;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const EF_EVENT_RX_DISCARD_CSUM_BAD: _bindgen_ty_2 = 0;
pub const EF_EVENT_RX_DISCARD_MCAST_MISMATCH: _bindgen_ty_2 = 1;
pub const EF_EVENT_RX_DISCARD_CRC_BAD: _bindgen_ty_2 = 2;
pub const EF_EVENT_RX_DISCARD_TRUNC: _bindgen_ty_2 = 3;
pub const EF_EVENT_RX_DISCARD_RIGHTS: _bindgen_ty_2 = 4;
pub const EF_EVENT_RX_DISCARD_EV_ERROR: _bindgen_ty_2 = 5;
pub const EF_EVENT_RX_DISCARD_OTHER: _bindgen_ty_2 = 6;
pub const EF_EVENT_RX_DISCARD_INNER_CSUM_BAD: _bindgen_ty_2 = 7;
pub const EF_EVENT_RX_DISCARD_MAX: _bindgen_ty_2 = 8;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const EF_EVENT_TX_ERROR_RIGHTS: _bindgen_ty_3 = 0;
pub const EF_EVENT_TX_ERROR_OFLOW: _bindgen_ty_3 = 1;
pub const EF_EVENT_TX_ERROR_2BIG: _bindgen_ty_3 = 2;
pub const EF_EVENT_TX_ERROR_BUS: _bindgen_ty_3 = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_iovec {
    pub iov_base: ef_addr,
    pub iov_len: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_iovec"][::std::mem::size_of::<ef_iovec>() - 16usize];
    ["Alignment of ef_iovec"][::std::mem::align_of::<ef_iovec>() - 8usize];
    ["Offset of field: ef_iovec::iov_base"][::std::mem::offset_of!(ef_iovec, iov_base) - 0usize];
    ["Offset of field: ef_iovec::iov_len"][::std::mem::offset_of!(ef_iovec, iov_len) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_remote_iovec {
    pub iov_base: ef_addr,
    pub iov_len: ::std::os::raw::c_uint,
    pub flags: u32,
    pub addrspace: ef_addrspace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_remote_iovec"][::std::mem::size_of::<ef_remote_iovec>() - 24usize];
    ["Alignment of ef_remote_iovec"][::std::mem::align_of::<ef_remote_iovec>() - 8usize];
    ["Offset of field: ef_remote_iovec::iov_base"]
        [::std::mem::offset_of!(ef_remote_iovec, iov_base) - 0usize];
    ["Offset of field: ef_remote_iovec::iov_len"]
        [::std::mem::offset_of!(ef_remote_iovec, iov_len) - 8usize];
    ["Offset of field: ef_remote_iovec::flags"]
        [::std::mem::offset_of!(ef_remote_iovec, flags) - 12usize];
    ["Offset of field: ef_remote_iovec::addrspace"]
        [::std::mem::offset_of!(ef_remote_iovec, addrspace) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_precisetime {
    pub tv_sec: i64,
    pub tv_nsec: u32,
    pub tv_nsec_frac: u16,
    pub tv_flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_precisetime"][::std::mem::size_of::<ef_precisetime>() - 16usize];
    ["Alignment of ef_precisetime"][::std::mem::align_of::<ef_precisetime>() - 8usize];
    ["Offset of field: ef_precisetime::tv_sec"]
        [::std::mem::offset_of!(ef_precisetime, tv_sec) - 0usize];
    ["Offset of field: ef_precisetime::tv_nsec"]
        [::std::mem::offset_of!(ef_precisetime, tv_nsec) - 8usize];
    ["Offset of field: ef_precisetime::tv_nsec_frac"]
        [::std::mem::offset_of!(ef_precisetime, tv_nsec_frac) - 12usize];
    ["Offset of field: ef_precisetime::tv_flags"]
        [::std::mem::offset_of!(ef_precisetime, tv_flags) - 14usize];
};
pub const ef_vi_flags_EF_VI_FLAGS_DEFAULT: ef_vi_flags = 0;
pub const ef_vi_flags_EF_VI_ISCSI_RX_HDIG: ef_vi_flags = 2;
pub const ef_vi_flags_EF_VI_ISCSI_TX_HDIG: ef_vi_flags = 4;
pub const ef_vi_flags_EF_VI_ISCSI_RX_DDIG: ef_vi_flags = 8;
pub const ef_vi_flags_EF_VI_ISCSI_TX_DDIG: ef_vi_flags = 16;
pub const ef_vi_flags_EF_VI_TX_PHYS_ADDR: ef_vi_flags = 32;
pub const ef_vi_flags_EF_VI_RX_PHYS_ADDR: ef_vi_flags = 64;
pub const ef_vi_flags_EF_VI_TX_IP_CSUM_DIS: ef_vi_flags = 128;
pub const ef_vi_flags_EF_VI_TX_TCPUDP_CSUM_DIS: ef_vi_flags = 256;
pub const ef_vi_flags_EF_VI_TX_TCPUDP_ONLY: ef_vi_flags = 512;
pub const ef_vi_flags_EF_VI_TX_FILTER_IP: ef_vi_flags = 1024;
pub const ef_vi_flags_EF_VI_TX_FILTER_MAC: ef_vi_flags = 2048;
pub const ef_vi_flags_EF_VI_TX_FILTER_MASK_1: ef_vi_flags = 4096;
pub const ef_vi_flags_EF_VI_TX_FILTER_MASK_2: ef_vi_flags = 8192;
pub const ef_vi_flags_EF_VI_TX_FILTER_MASK_3: ef_vi_flags = 12288;
pub const ef_vi_flags_EF_VI_TX_PUSH_DISABLE: ef_vi_flags = 16384;
pub const ef_vi_flags_EF_VI_TX_PUSH_ALWAYS: ef_vi_flags = 32768;
pub const ef_vi_flags_EF_VI_RX_TIMESTAMPS: ef_vi_flags = 65536;
pub const ef_vi_flags_EF_VI_TX_TIMESTAMPS: ef_vi_flags = 131072;
pub const ef_vi_flags_EF_VI_RX_PACKED_STREAM: ef_vi_flags = 524288;
pub const ef_vi_flags_EF_VI_RX_PS_BUF_SIZE_64K: ef_vi_flags = 1048576;
pub const ef_vi_flags_EF_VI_RX_EVENT_MERGE: ef_vi_flags = 2097152;
pub const ef_vi_flags_EF_VI_TX_ALT: ef_vi_flags = 4194304;
pub const ef_vi_flags_EF_VI_ENABLE_EV_TIMER: ef_vi_flags = 8388608;
pub const ef_vi_flags_EF_VI_TX_CTPIO: ef_vi_flags = 16777216;
pub const ef_vi_flags_EF_VI_TX_CTPIO_NO_POISON: ef_vi_flags = 33554432;
pub const ef_vi_flags_EF_VI_RX_ZEROCOPY: ef_vi_flags = 67108864;
pub const ef_vi_flags_EF_VI_ALLOW_MEMCPY: ef_vi_flags = 134217728;
pub const ef_vi_flags_EF_VI_EFCT_UNIQUEUE: ef_vi_flags = 268435456;
pub const ef_vi_flags_EF_VI_RX_EXCLUSIVE: ef_vi_flags = 536870912;
pub type ef_vi_flags = ::std::os::raw::c_uint;
pub const ef_vi_out_flags_EF_VI_OUT_CLOCK_SYNC_STATUS: ef_vi_out_flags = 1;
pub type ef_vi_out_flags = ::std::os::raw::c_uint;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_L4_CSUM_ERR: ef_vi_rx_discard_err_flags = 1;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_L3_CSUM_ERR: ef_vi_rx_discard_err_flags = 2;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_ETH_FCS_ERR: ef_vi_rx_discard_err_flags = 4;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_ETH_LEN_ERR: ef_vi_rx_discard_err_flags = 8;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_TOBE_DISC: ef_vi_rx_discard_err_flags = 16;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_INNER_L4_CSUM_ERR:
    ef_vi_rx_discard_err_flags = 32;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_INNER_L3_CSUM_ERR:
    ef_vi_rx_discard_err_flags = 64;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_L2_CLASS_OTHER: ef_vi_rx_discard_err_flags =
    128;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_L3_CLASS_OTHER: ef_vi_rx_discard_err_flags =
    256;
pub const ef_vi_rx_discard_err_flags_EF_VI_DISCARD_RX_L4_CLASS_OTHER: ef_vi_rx_discard_err_flags =
    512;
pub type ef_vi_rx_discard_err_flags = ::std::os::raw::c_uint;
pub const ef_timestamp_format_TS_FORMAT_SECONDS_27FRACTION: ef_timestamp_format = 0;
pub const ef_timestamp_format_TS_FORMAT_SECONDS_QTR_NANOSECONDS: ef_timestamp_format = 1;
pub type ef_timestamp_format = ::std::os::raw::c_uint;
pub const ef_vi_arch_EF_VI_ARCH_FALCON: ef_vi_arch = 0;
pub const ef_vi_arch_EF_VI_ARCH_EF10: ef_vi_arch = 1;
pub const ef_vi_arch_EF_VI_ARCH_EF100: ef_vi_arch = 2;
pub const ef_vi_arch_EF_VI_ARCH_EFCT: ef_vi_arch = 3;
pub const ef_vi_arch_EF_VI_ARCH_AF_XDP: ef_vi_arch = 4;
pub const ef_vi_arch_EF_VI_ARCH_EF10CT: ef_vi_arch = 5;
pub type ef_vi_arch = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_txq_state {
    pub previous: u32,
    pub added: u32,
    pub removed: u32,
    pub ct_added: u32,
    pub ct_removed: u32,
    pub ts_nsec: u32,
    pub ts_nsec_frac: u16,
    pub ts_flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_txq_state"][::std::mem::size_of::<ef_vi_txq_state>() - 28usize];
    ["Alignment of ef_vi_txq_state"][::std::mem::align_of::<ef_vi_txq_state>() - 4usize];
    ["Offset of field: ef_vi_txq_state::previous"]
        [::std::mem::offset_of!(ef_vi_txq_state, previous) - 0usize];
    ["Offset of field: ef_vi_txq_state::added"]
        [::std::mem::offset_of!(ef_vi_txq_state, added) - 4usize];
    ["Offset of field: ef_vi_txq_state::removed"]
        [::std::mem::offset_of!(ef_vi_txq_state, removed) - 8usize];
    ["Offset of field: ef_vi_txq_state::ct_added"]
        [::std::mem::offset_of!(ef_vi_txq_state, ct_added) - 12usize];
    ["Offset of field: ef_vi_txq_state::ct_removed"]
        [::std::mem::offset_of!(ef_vi_txq_state, ct_removed) - 16usize];
    ["Offset of field: ef_vi_txq_state::ts_nsec"]
        [::std::mem::offset_of!(ef_vi_txq_state, ts_nsec) - 20usize];
    ["Offset of field: ef_vi_txq_state::ts_nsec_frac"]
        [::std::mem::offset_of!(ef_vi_txq_state, ts_nsec_frac) - 24usize];
    ["Offset of field: ef_vi_txq_state::ts_flags"]
        [::std::mem::offset_of!(ef_vi_txq_state, ts_flags) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_efct_rxq_ptr {
    pub data_pkt: u32,
    pub superbuf_pkts: u16,
    pub meta_offset: u8,
    pub reserved: u8,
    pub meta_pkt: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_efct_rxq_ptr"][::std::mem::size_of::<ef_vi_efct_rxq_ptr>() - 16usize];
    ["Alignment of ef_vi_efct_rxq_ptr"][::std::mem::align_of::<ef_vi_efct_rxq_ptr>() - 8usize];
    ["Offset of field: ef_vi_efct_rxq_ptr::data_pkt"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ptr, data_pkt) - 0usize];
    ["Offset of field: ef_vi_efct_rxq_ptr::superbuf_pkts"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ptr, superbuf_pkts) - 4usize];
    ["Offset of field: ef_vi_efct_rxq_ptr::meta_offset"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ptr, meta_offset) - 6usize];
    ["Offset of field: ef_vi_efct_rxq_ptr::reserved"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ptr, reserved) - 7usize];
    ["Offset of field: ef_vi_efct_rxq_ptr::meta_pkt"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ptr, meta_pkt) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_rxq_state {
    pub posted: u32,
    pub added: u32,
    pub removed: u32,
    pub in_jumbo: u32,
    pub bytes_acc: u32,
    pub last_desc_i: u16,
    pub rx_ps_credit_avail: u16,
    pub rxq_ptr: [ef_vi_efct_rxq_ptr; 8usize],
    pub sb_desc_free_head: [i16; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_rxq_state"][::std::mem::size_of::<ef_vi_rxq_state>() - 168usize];
    ["Alignment of ef_vi_rxq_state"][::std::mem::align_of::<ef_vi_rxq_state>() - 8usize];
    ["Offset of field: ef_vi_rxq_state::posted"]
        [::std::mem::offset_of!(ef_vi_rxq_state, posted) - 0usize];
    ["Offset of field: ef_vi_rxq_state::added"]
        [::std::mem::offset_of!(ef_vi_rxq_state, added) - 4usize];
    ["Offset of field: ef_vi_rxq_state::removed"]
        [::std::mem::offset_of!(ef_vi_rxq_state, removed) - 8usize];
    ["Offset of field: ef_vi_rxq_state::in_jumbo"]
        [::std::mem::offset_of!(ef_vi_rxq_state, in_jumbo) - 12usize];
    ["Offset of field: ef_vi_rxq_state::bytes_acc"]
        [::std::mem::offset_of!(ef_vi_rxq_state, bytes_acc) - 16usize];
    ["Offset of field: ef_vi_rxq_state::last_desc_i"]
        [::std::mem::offset_of!(ef_vi_rxq_state, last_desc_i) - 20usize];
    ["Offset of field: ef_vi_rxq_state::rx_ps_credit_avail"]
        [::std::mem::offset_of!(ef_vi_rxq_state, rx_ps_credit_avail) - 22usize];
    ["Offset of field: ef_vi_rxq_state::rxq_ptr"]
        [::std::mem::offset_of!(ef_vi_rxq_state, rxq_ptr) - 24usize];
    ["Offset of field: ef_vi_rxq_state::sb_desc_free_head"]
        [::std::mem::offset_of!(ef_vi_rxq_state, sb_desc_free_head) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_eventq_state {
    pub evq_ptr: ef_eventq_ptr,
    pub evq_clear_stride: i32,
    pub sync_timestamp_major: u32,
    pub sync_timestamp_minor: u32,
    pub sync_timestamp_minimum: u32,
    pub sync_timestamp_synchronised: u32,
    pub unsol_credit_seq: u32,
    pub sync_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_eventq_state"][::std::mem::size_of::<ef_eventq_state>() - 32usize];
    ["Alignment of ef_eventq_state"][::std::mem::align_of::<ef_eventq_state>() - 4usize];
    ["Offset of field: ef_eventq_state::evq_ptr"]
        [::std::mem::offset_of!(ef_eventq_state, evq_ptr) - 0usize];
    ["Offset of field: ef_eventq_state::evq_clear_stride"]
        [::std::mem::offset_of!(ef_eventq_state, evq_clear_stride) - 4usize];
    ["Offset of field: ef_eventq_state::sync_timestamp_major"]
        [::std::mem::offset_of!(ef_eventq_state, sync_timestamp_major) - 8usize];
    ["Offset of field: ef_eventq_state::sync_timestamp_minor"]
        [::std::mem::offset_of!(ef_eventq_state, sync_timestamp_minor) - 12usize];
    ["Offset of field: ef_eventq_state::sync_timestamp_minimum"]
        [::std::mem::offset_of!(ef_eventq_state, sync_timestamp_minimum) - 16usize];
    ["Offset of field: ef_eventq_state::sync_timestamp_synchronised"]
        [::std::mem::offset_of!(ef_eventq_state, sync_timestamp_synchronised) - 20usize];
    ["Offset of field: ef_eventq_state::unsol_credit_seq"]
        [::std::mem::offset_of!(ef_eventq_state, unsol_credit_seq) - 24usize];
    ["Offset of field: ef_eventq_state::sync_flags"]
        [::std::mem::offset_of!(ef_eventq_state, sync_flags) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_txq {
    pub mask: u32,
    pub ct_fifo_bytes: u32,
    pub efct_fixed_header: u64,
    pub efct_aperture_mask: u32,
    pub descriptors: *mut ::std::os::raw::c_void,
    pub ids: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_txq"][::std::mem::size_of::<ef_vi_txq>() - 40usize];
    ["Alignment of ef_vi_txq"][::std::mem::align_of::<ef_vi_txq>() - 8usize];
    ["Offset of field: ef_vi_txq::mask"][::std::mem::offset_of!(ef_vi_txq, mask) - 0usize];
    ["Offset of field: ef_vi_txq::ct_fifo_bytes"]
        [::std::mem::offset_of!(ef_vi_txq, ct_fifo_bytes) - 4usize];
    ["Offset of field: ef_vi_txq::efct_fixed_header"]
        [::std::mem::offset_of!(ef_vi_txq, efct_fixed_header) - 8usize];
    ["Offset of field: ef_vi_txq::efct_aperture_mask"]
        [::std::mem::offset_of!(ef_vi_txq, efct_aperture_mask) - 16usize];
    ["Offset of field: ef_vi_txq::descriptors"]
        [::std::mem::offset_of!(ef_vi_txq, descriptors) - 24usize];
    ["Offset of field: ef_vi_txq::ids"][::std::mem::offset_of!(ef_vi_txq, ids) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_rxq {
    pub mask: u32,
    pub descriptors: *mut ::std::os::raw::c_void,
    pub ids: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_rxq"][::std::mem::size_of::<ef_vi_rxq>() - 24usize];
    ["Alignment of ef_vi_rxq"][::std::mem::align_of::<ef_vi_rxq>() - 8usize];
    ["Offset of field: ef_vi_rxq::mask"][::std::mem::offset_of!(ef_vi_rxq, mask) - 0usize];
    ["Offset of field: ef_vi_rxq::descriptors"]
        [::std::mem::offset_of!(ef_vi_rxq, descriptors) - 8usize];
    ["Offset of field: ef_vi_rxq::ids"][::std::mem::offset_of!(ef_vi_rxq, ids) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_efct_rxq {
    pub live: ef_vi_efct_rxq__bindgen_ty_1,
    pub qid: ::std::os::raw::c_int,
    pub config_generation: u32,
    pub superbuf: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_efct_rxq__bindgen_ty_1 {
    pub superbuf_pkts: *const u32,
    pub config_generation: *const ::std::os::raw::c_uint,
    pub time_sync: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_efct_rxq__bindgen_ty_1"]
        [::std::mem::size_of::<ef_vi_efct_rxq__bindgen_ty_1>() - 24usize];
    ["Alignment of ef_vi_efct_rxq__bindgen_ty_1"]
        [::std::mem::align_of::<ef_vi_efct_rxq__bindgen_ty_1>() - 8usize];
    ["Offset of field: ef_vi_efct_rxq__bindgen_ty_1::superbuf_pkts"]
        [::std::mem::offset_of!(ef_vi_efct_rxq__bindgen_ty_1, superbuf_pkts) - 0usize];
    ["Offset of field: ef_vi_efct_rxq__bindgen_ty_1::config_generation"]
        [::std::mem::offset_of!(ef_vi_efct_rxq__bindgen_ty_1, config_generation) - 8usize];
    ["Offset of field: ef_vi_efct_rxq__bindgen_ty_1::time_sync"]
        [::std::mem::offset_of!(ef_vi_efct_rxq__bindgen_ty_1, time_sync) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_efct_rxq"][::std::mem::size_of::<ef_vi_efct_rxq>() - 40usize];
    ["Alignment of ef_vi_efct_rxq"][::std::mem::align_of::<ef_vi_efct_rxq>() - 8usize];
    ["Offset of field: ef_vi_efct_rxq::live"]
        [::std::mem::offset_of!(ef_vi_efct_rxq, live) - 0usize];
    ["Offset of field: ef_vi_efct_rxq::qid"][::std::mem::offset_of!(ef_vi_efct_rxq, qid) - 24usize];
    ["Offset of field: ef_vi_efct_rxq::config_generation"]
        [::std::mem::offset_of!(ef_vi_efct_rxq, config_generation) - 28usize];
    ["Offset of field: ef_vi_efct_rxq::superbuf"]
        [::std::mem::offset_of!(ef_vi_efct_rxq, superbuf) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_efct_rxq_ops {
    pub available: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ef_vi, qid: ::std::os::raw::c_int) -> bool,
    >,
    pub next: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            qid: ::std::os::raw::c_int,
            sentinel: *mut bool,
            seq: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            qid: ::std::os::raw::c_int,
            sbid: ::std::os::raw::c_int,
        ),
    >,
    pub post: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            qid: ::std::os::raw::c_int,
            sbid: ::std::os::raw::c_int,
            sentinel: bool,
        ),
    >,
    pub attach: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            qid: ::std::os::raw::c_int,
            buf_fd: ::std::os::raw::c_int,
            n_superbufs: ::std::os::raw::c_uint,
            shared_mode: bool,
        ) -> ::std::os::raw::c_int,
    >,
    pub refresh: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ef_vi, qid: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub prime: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ef_vi, dh: ef_driver_handle) -> ::std::os::raw::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_efct_rxq_ops"][::std::mem::size_of::<ef_vi_efct_rxq_ops>() - 64usize];
    ["Alignment of ef_vi_efct_rxq_ops"][::std::mem::align_of::<ef_vi_efct_rxq_ops>() - 8usize];
    ["Offset of field: ef_vi_efct_rxq_ops::available"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, available) - 0usize];
    ["Offset of field: ef_vi_efct_rxq_ops::next"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, next) - 8usize];
    ["Offset of field: ef_vi_efct_rxq_ops::free"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, free) - 16usize];
    ["Offset of field: ef_vi_efct_rxq_ops::post"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, post) - 24usize];
    ["Offset of field: ef_vi_efct_rxq_ops::attach"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, attach) - 32usize];
    ["Offset of field: ef_vi_efct_rxq_ops::refresh"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, refresh) - 40usize];
    ["Offset of field: ef_vi_efct_rxq_ops::prime"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, prime) - 48usize];
    ["Offset of field: ef_vi_efct_rxq_ops::cleanup"]
        [::std::mem::offset_of!(ef_vi_efct_rxq_ops, cleanup) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_efct_rxqs {
    pub active_qs: *const u64,
    pub max_qs: u64,
    pub q: [ef_vi_efct_rxq; 8usize],
    pub ops: *mut ef_vi_efct_rxq_ops,
    pub meta_offset: u8,
    pub rx_stride: u16,
    pub shm: *mut efab_efct_rxq_uk_shm_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_efct_rxqs"][::std::mem::size_of::<ef_vi_efct_rxqs>() - 360usize];
    ["Alignment of ef_vi_efct_rxqs"][::std::mem::align_of::<ef_vi_efct_rxqs>() - 8usize];
    ["Offset of field: ef_vi_efct_rxqs::active_qs"]
        [::std::mem::offset_of!(ef_vi_efct_rxqs, active_qs) - 0usize];
    ["Offset of field: ef_vi_efct_rxqs::max_qs"]
        [::std::mem::offset_of!(ef_vi_efct_rxqs, max_qs) - 8usize];
    ["Offset of field: ef_vi_efct_rxqs::q"][::std::mem::offset_of!(ef_vi_efct_rxqs, q) - 16usize];
    ["Offset of field: ef_vi_efct_rxqs::ops"]
        [::std::mem::offset_of!(ef_vi_efct_rxqs, ops) - 336usize];
    ["Offset of field: ef_vi_efct_rxqs::meta_offset"]
        [::std::mem::offset_of!(ef_vi_efct_rxqs, meta_offset) - 344usize];
    ["Offset of field: ef_vi_efct_rxqs::rx_stride"]
        [::std::mem::offset_of!(ef_vi_efct_rxqs, rx_stride) - 346usize];
    ["Offset of field: ef_vi_efct_rxqs::shm"]
        [::std::mem::offset_of!(ef_vi_efct_rxqs, shm) - 352usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_state {
    pub evq: ef_eventq_state,
    pub txq: ef_vi_txq_state,
    pub rxq: ef_vi_rxq_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_state"][::std::mem::size_of::<ef_vi_state>() - 232usize];
    ["Alignment of ef_vi_state"][::std::mem::align_of::<ef_vi_state>() - 8usize];
    ["Offset of field: ef_vi_state::evq"][::std::mem::offset_of!(ef_vi_state, evq) - 0usize];
    ["Offset of field: ef_vi_state::txq"][::std::mem::offset_of!(ef_vi_state, txq) - 32usize];
    ["Offset of field: ef_vi_state::rxq"][::std::mem::offset_of!(ef_vi_state, rxq) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_stats {
    pub rx_ev_lost: u32,
    pub rx_ev_bad_desc_i: u32,
    pub rx_ev_bad_q_label: u32,
    pub evq_gap: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_stats"][::std::mem::size_of::<ef_vi_stats>() - 16usize];
    ["Alignment of ef_vi_stats"][::std::mem::align_of::<ef_vi_stats>() - 4usize];
    ["Offset of field: ef_vi_stats::rx_ev_lost"]
        [::std::mem::offset_of!(ef_vi_stats, rx_ev_lost) - 0usize];
    ["Offset of field: ef_vi_stats::rx_ev_bad_desc_i"]
        [::std::mem::offset_of!(ef_vi_stats, rx_ev_bad_desc_i) - 4usize];
    ["Offset of field: ef_vi_stats::rx_ev_bad_q_label"]
        [::std::mem::offset_of!(ef_vi_stats, rx_ev_bad_q_label) - 8usize];
    ["Offset of field: ef_vi_stats::evq_gap"]
        [::std::mem::offset_of!(ef_vi_stats, evq_gap) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_nic_type {
    pub arch: ::std::os::raw::c_uchar,
    pub variant: ::std::os::raw::c_char,
    pub revision: ::std::os::raw::c_uchar,
    pub nic_flags: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_nic_type"][::std::mem::size_of::<ef_vi_nic_type>() - 4usize];
    ["Alignment of ef_vi_nic_type"][::std::mem::align_of::<ef_vi_nic_type>() - 1usize];
    ["Offset of field: ef_vi_nic_type::arch"]
        [::std::mem::offset_of!(ef_vi_nic_type, arch) - 0usize];
    ["Offset of field: ef_vi_nic_type::variant"]
        [::std::mem::offset_of!(ef_vi_nic_type, variant) - 1usize];
    ["Offset of field: ef_vi_nic_type::revision"]
        [::std::mem::offset_of!(ef_vi_nic_type, revision) - 2usize];
    ["Offset of field: ef_vi_nic_type::nic_flags"]
        [::std::mem::offset_of!(ef_vi_nic_type, nic_flags) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_transmit_alt_overhead {
    pub pre_round: u32,
    pub mask: u32,
    pub post_round: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_transmit_alt_overhead"]
        [::std::mem::size_of::<ef_vi_transmit_alt_overhead>() - 12usize];
    ["Alignment of ef_vi_transmit_alt_overhead"]
        [::std::mem::align_of::<ef_vi_transmit_alt_overhead>() - 4usize];
    ["Offset of field: ef_vi_transmit_alt_overhead::pre_round"]
        [::std::mem::offset_of!(ef_vi_transmit_alt_overhead, pre_round) - 0usize];
    ["Offset of field: ef_vi_transmit_alt_overhead::mask"]
        [::std::mem::offset_of!(ef_vi_transmit_alt_overhead, mask) - 4usize];
    ["Offset of field: ef_vi_transmit_alt_overhead::post_round"]
        [::std::mem::offset_of!(ef_vi_transmit_alt_overhead, post_round) - 8usize];
};
pub const ef_vi_tx_extra_flags_EF_VI_TX_EXTRA_MARK: ef_vi_tx_extra_flags = 1;
pub const ef_vi_tx_extra_flags_EF_VI_TX_EXTRA_INGRESS_MPORT: ef_vi_tx_extra_flags = 2;
pub const ef_vi_tx_extra_flags_EF_VI_TX_EXTRA_EGRESS_MPORT: ef_vi_tx_extra_flags = 4;
pub const ef_vi_tx_extra_flags_EF_VI_TX_EXTRA_CAPSULE_METADATA: ef_vi_tx_extra_flags = 8;
pub type ef_vi_tx_extra_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_tx_extra {
    pub flags: ef_vi_tx_extra_flags,
    pub mark: u32,
    pub ingress_mport: u16,
    pub egress_mport: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_tx_extra"][::std::mem::size_of::<ef_vi_tx_extra>() - 12usize];
    ["Alignment of ef_vi_tx_extra"][::std::mem::align_of::<ef_vi_tx_extra>() - 4usize];
    ["Offset of field: ef_vi_tx_extra::flags"]
        [::std::mem::offset_of!(ef_vi_tx_extra, flags) - 0usize];
    ["Offset of field: ef_vi_tx_extra::mark"]
        [::std::mem::offset_of!(ef_vi_tx_extra, mark) - 4usize];
    ["Offset of field: ef_vi_tx_extra::ingress_mport"]
        [::std::mem::offset_of!(ef_vi_tx_extra, ingress_mport) - 8usize];
    ["Offset of field: ef_vi_tx_extra::egress_mport"]
        [::std::mem::offset_of!(ef_vi_tx_extra, egress_mport) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_tx_warm_state {
    pub removed: ::std::os::raw::c_uint,
    pub vi_ctpio_mmap_ptr: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_tx_warm_state"][::std::mem::size_of::<ef_vi_tx_warm_state>() - 16usize];
    ["Alignment of ef_vi_tx_warm_state"][::std::mem::align_of::<ef_vi_tx_warm_state>() - 8usize];
    ["Offset of field: ef_vi_tx_warm_state::removed"]
        [::std::mem::offset_of!(ef_vi_tx_warm_state, removed) - 0usize];
    ["Offset of field: ef_vi_tx_warm_state::vi_ctpio_mmap_ptr"]
        [::std::mem::offset_of!(ef_vi_tx_warm_state, vi_ctpio_mmap_ptr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi {
    pub inited: ::std::os::raw::c_uint,
    pub vi_resource_id: ::std::os::raw::c_uint,
    pub vi_i: ::std::os::raw::c_uint,
    pub dh: ef_driver_handle,
    pub rx_buffer_len: ::std::os::raw::c_uint,
    pub rx_prefix_len: ::std::os::raw::c_uint,
    pub last_ctpio_failed: u8,
    pub rx_discard_mask: u64,
    pub rx_ts_correction: ::std::os::raw::c_int,
    pub rx_pkt_len_offset: ::std::os::raw::c_uint,
    pub rx_pkt_len_mask: ::std::os::raw::c_uint,
    pub tx_ts_correction_ns: ::std::os::raw::c_int,
    pub ts_format: ef_timestamp_format,
    pub ts_subnano_bits: u8,
    pub vi_mem_mmap_ptr: *mut ::std::os::raw::c_char,
    pub vi_mem_mmap_bytes: ::std::os::raw::c_int,
    pub vi_io_mmap_ptr: *mut ::std::os::raw::c_char,
    pub vi_io_mmap_bytes: ::std::os::raw::c_int,
    pub vi_ctpio_mmap_ptr: *mut ::std::os::raw::c_char,
    pub vi_ctpio_wb_ticks: u32,
    pub vi_rx_post_buffer_mmap_ptr: *mut ::std::os::raw::c_char,
    pub vi_rx_post_buffer_mmap_bytes: ::std::os::raw::c_int,
    pub ep_state_bytes: ::std::os::raw::c_int,
    pub vi_clustered: ::std::os::raw::c_int,
    pub vi_is_packed_stream: ::std::os::raw::c_int,
    pub vi_is_normal: ::std::os::raw::c_int,
    pub vi_ps_buf_size: ::std::os::raw::c_uint,
    pub io: ef_vi_ioaddr_t,
    pub linked_pio: *mut ef_pio,
    pub evq_base: *mut ::std::os::raw::c_char,
    pub evq_mask: ::std::os::raw::c_uint,
    pub evq_phase_bits: ::std::os::raw::c_int,
    pub timer_quantum_ns: ::std::os::raw::c_uint,
    pub tx_push_thresh: ::std::os::raw::c_uint,
    pub vi_txq: ef_vi_txq,
    pub vi_rxq: ef_vi_rxq,
    pub ep_state: *mut ef_vi_state,
    pub vi_flags: ef_vi_flags,
    pub vi_out_flags: ef_vi_out_flags,
    pub vi_stats: *mut ef_vi_stats,
    pub vi_qs: [*mut ef_vi; 32usize],
    pub vi_qs_n: ::std::os::raw::c_int,
    pub future_qid: u8,
    pub efct_rxqs: ef_vi_efct_rxqs,
    pub tx_alt_num: ::std::os::raw::c_uint,
    pub tx_alt_id2hw: *mut ::std::os::raw::c_uint,
    pub tx_alt_hw2id: *mut ::std::os::raw::c_uint,
    pub nic_type: ef_vi_nic_type,
    pub xdp_kick:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi) -> ::std::os::raw::c_int>,
    pub xdp_kick_context: *mut ::std::os::raw::c_void,
    pub unsol_credit_seq_mask: u32,
    pub ops: ef_vi_ops,
    pub internal_ops: ef_vi_internal_ops,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_ops {
    pub transmit: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            base: ef_addr,
            len: ::std::os::raw::c_int,
            arg2: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmitv: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            arg2: *const ef_iovec,
            iov_len: ::std::os::raw::c_int,
            arg3: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmitv_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            arg2: *const ef_iovec,
            iov_len: ::std::os::raw::c_int,
            arg3: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmit_push: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
    pub transmit_pio: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            offset: ::std::os::raw::c_int,
            len: ::std::os::raw::c_int,
            dma_id: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmit_copy_pio: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            pio_offset: ::std::os::raw::c_int,
            src_buf: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
            dma_id: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub start_transmit_warm: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            saved_state: *mut ef_vi_tx_warm_state,
            warm_ctpio_mmap_ptr: *mut ::std::os::raw::c_char,
        ),
    >,
    pub stop_transmit_warm: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ef_vi, saved_state: *mut ef_vi_tx_warm_state),
    >,
    pub transmit_pio_warm: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
    pub transmit_copy_pio_warm: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            pio_offset: ::std::os::raw::c_int,
            src_buf: *const ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ),
    >,
    pub transmitv_ctpio: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            frame_len: usize,
            iov: *const iovec,
            iov_len: ::std::os::raw::c_int,
            threshold: ::std::os::raw::c_uint,
        ),
    >,
    pub transmitv_ctpio_copy: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            frame_len: usize,
            iov: *const iovec,
            iov_len: ::std::os::raw::c_int,
            threshold: ::std::os::raw::c_uint,
            fallback: *mut ::std::os::raw::c_void,
        ),
    >,
    pub transmit_alt_select: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            alt_id: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmit_alt_select_default:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi) -> ::std::os::raw::c_int>,
    pub transmit_alt_stop: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            alt_id: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmit_alt_go: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            alt_id: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub receive_set_discards: ::std::option::Option<
        unsafe extern "C" fn(
            vi: *mut ef_vi,
            discard_err_flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub receive_get_discards: ::std::option::Option<unsafe extern "C" fn(vi: *mut ef_vi) -> u64>,
    pub transmit_alt_discard: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            alt_id: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub receive_init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            arg2: ef_addr,
            arg3: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub receive_push: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
    pub receive_get_timestamp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            pkt: *const ::std::os::raw::c_void,
            arg2: *mut ef_precisetime,
        ) -> ::std::os::raw::c_int,
    >,
    pub eventq_poll: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            arg2: *mut ef_event,
            evs_len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub eventq_prime: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
    pub eventq_timer_prime:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi, v: ::std::os::raw::c_uint)>,
    pub eventq_timer_run:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi, v: ::std::os::raw::c_uint)>,
    pub eventq_timer_clear: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
    pub eventq_timer_zero: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ef_vi)>,
    pub eventq_has_event:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ef_vi) -> ::std::os::raw::c_int>,
    pub eventq_has_many_events: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ef_vi,
            n_events: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmit_ctpio_fallback: ::std::option::Option<
        unsafe extern "C" fn(
            vi: *mut ef_vi,
            dma_addr: ef_addr,
            len: usize,
            dma_id: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
    pub transmitv_ctpio_fallback: ::std::option::Option<
        unsafe extern "C" fn(
            vi: *mut ef_vi,
            dma_iov: *const ef_iovec,
            dma_iov_len: ::std::os::raw::c_int,
            dma_id: ef_request_id,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_ops"][::std::mem::size_of::<ef_vi_ops>() - 256usize];
    ["Alignment of ef_vi_ops"][::std::mem::align_of::<ef_vi_ops>() - 8usize];
    ["Offset of field: ef_vi_ops::transmit"][::std::mem::offset_of!(ef_vi_ops, transmit) - 0usize];
    ["Offset of field: ef_vi_ops::transmitv"]
        [::std::mem::offset_of!(ef_vi_ops, transmitv) - 8usize];
    ["Offset of field: ef_vi_ops::transmitv_init"]
        [::std::mem::offset_of!(ef_vi_ops, transmitv_init) - 16usize];
    ["Offset of field: ef_vi_ops::transmit_push"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_push) - 24usize];
    ["Offset of field: ef_vi_ops::transmit_pio"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_pio) - 32usize];
    ["Offset of field: ef_vi_ops::transmit_copy_pio"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_copy_pio) - 40usize];
    ["Offset of field: ef_vi_ops::start_transmit_warm"]
        [::std::mem::offset_of!(ef_vi_ops, start_transmit_warm) - 48usize];
    ["Offset of field: ef_vi_ops::stop_transmit_warm"]
        [::std::mem::offset_of!(ef_vi_ops, stop_transmit_warm) - 56usize];
    ["Offset of field: ef_vi_ops::transmit_pio_warm"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_pio_warm) - 64usize];
    ["Offset of field: ef_vi_ops::transmit_copy_pio_warm"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_copy_pio_warm) - 72usize];
    ["Offset of field: ef_vi_ops::transmitv_ctpio"]
        [::std::mem::offset_of!(ef_vi_ops, transmitv_ctpio) - 80usize];
    ["Offset of field: ef_vi_ops::transmitv_ctpio_copy"]
        [::std::mem::offset_of!(ef_vi_ops, transmitv_ctpio_copy) - 88usize];
    ["Offset of field: ef_vi_ops::transmit_alt_select"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_alt_select) - 96usize];
    ["Offset of field: ef_vi_ops::transmit_alt_select_default"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_alt_select_default) - 104usize];
    ["Offset of field: ef_vi_ops::transmit_alt_stop"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_alt_stop) - 112usize];
    ["Offset of field: ef_vi_ops::transmit_alt_go"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_alt_go) - 120usize];
    ["Offset of field: ef_vi_ops::receive_set_discards"]
        [::std::mem::offset_of!(ef_vi_ops, receive_set_discards) - 128usize];
    ["Offset of field: ef_vi_ops::receive_get_discards"]
        [::std::mem::offset_of!(ef_vi_ops, receive_get_discards) - 136usize];
    ["Offset of field: ef_vi_ops::transmit_alt_discard"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_alt_discard) - 144usize];
    ["Offset of field: ef_vi_ops::receive_init"]
        [::std::mem::offset_of!(ef_vi_ops, receive_init) - 152usize];
    ["Offset of field: ef_vi_ops::receive_push"]
        [::std::mem::offset_of!(ef_vi_ops, receive_push) - 160usize];
    ["Offset of field: ef_vi_ops::receive_get_timestamp"]
        [::std::mem::offset_of!(ef_vi_ops, receive_get_timestamp) - 168usize];
    ["Offset of field: ef_vi_ops::eventq_poll"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_poll) - 176usize];
    ["Offset of field: ef_vi_ops::eventq_prime"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_prime) - 184usize];
    ["Offset of field: ef_vi_ops::eventq_timer_prime"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_timer_prime) - 192usize];
    ["Offset of field: ef_vi_ops::eventq_timer_run"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_timer_run) - 200usize];
    ["Offset of field: ef_vi_ops::eventq_timer_clear"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_timer_clear) - 208usize];
    ["Offset of field: ef_vi_ops::eventq_timer_zero"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_timer_zero) - 216usize];
    ["Offset of field: ef_vi_ops::eventq_has_event"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_has_event) - 224usize];
    ["Offset of field: ef_vi_ops::eventq_has_many_events"]
        [::std::mem::offset_of!(ef_vi_ops, eventq_has_many_events) - 232usize];
    ["Offset of field: ef_vi_ops::transmit_ctpio_fallback"]
        [::std::mem::offset_of!(ef_vi_ops, transmit_ctpio_fallback) - 240usize];
    ["Offset of field: ef_vi_ops::transmitv_ctpio_fallback"]
        [::std::mem::offset_of!(ef_vi_ops, transmitv_ctpio_fallback) - 248usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_internal_ops {
    pub design_parameters: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            arg2: *mut efab_nic_design_parameters,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_filter_add: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ef_vi,
            fs: *const ef_filter_spec,
            cookie: *const ef_filter_cookie,
            rxq: ::std::os::raw::c_int,
            shared_mode: bool,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_internal_ops"][::std::mem::size_of::<ef_vi_internal_ops>() - 16usize];
    ["Alignment of ef_vi_internal_ops"][::std::mem::align_of::<ef_vi_internal_ops>() - 8usize];
    ["Offset of field: ef_vi_internal_ops::design_parameters"]
        [::std::mem::offset_of!(ef_vi_internal_ops, design_parameters) - 0usize];
    ["Offset of field: ef_vi_internal_ops::post_filter_add"]
        [::std::mem::offset_of!(ef_vi_internal_ops, post_filter_add) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi"][::std::mem::size_of::<ef_vi>() - 1224usize];
    ["Alignment of ef_vi"][::std::mem::align_of::<ef_vi>() - 8usize];
    ["Offset of field: ef_vi::inited"][::std::mem::offset_of!(ef_vi, inited) - 0usize];
    ["Offset of field: ef_vi::vi_resource_id"]
        [::std::mem::offset_of!(ef_vi, vi_resource_id) - 4usize];
    ["Offset of field: ef_vi::vi_i"][::std::mem::offset_of!(ef_vi, vi_i) - 8usize];
    ["Offset of field: ef_vi::dh"][::std::mem::offset_of!(ef_vi, dh) - 12usize];
    ["Offset of field: ef_vi::rx_buffer_len"]
        [::std::mem::offset_of!(ef_vi, rx_buffer_len) - 16usize];
    ["Offset of field: ef_vi::rx_prefix_len"]
        [::std::mem::offset_of!(ef_vi, rx_prefix_len) - 20usize];
    ["Offset of field: ef_vi::last_ctpio_failed"]
        [::std::mem::offset_of!(ef_vi, last_ctpio_failed) - 24usize];
    ["Offset of field: ef_vi::rx_discard_mask"]
        [::std::mem::offset_of!(ef_vi, rx_discard_mask) - 32usize];
    ["Offset of field: ef_vi::rx_ts_correction"]
        [::std::mem::offset_of!(ef_vi, rx_ts_correction) - 40usize];
    ["Offset of field: ef_vi::rx_pkt_len_offset"]
        [::std::mem::offset_of!(ef_vi, rx_pkt_len_offset) - 44usize];
    ["Offset of field: ef_vi::rx_pkt_len_mask"]
        [::std::mem::offset_of!(ef_vi, rx_pkt_len_mask) - 48usize];
    ["Offset of field: ef_vi::tx_ts_correction_ns"]
        [::std::mem::offset_of!(ef_vi, tx_ts_correction_ns) - 52usize];
    ["Offset of field: ef_vi::ts_format"][::std::mem::offset_of!(ef_vi, ts_format) - 56usize];
    ["Offset of field: ef_vi::ts_subnano_bits"]
        [::std::mem::offset_of!(ef_vi, ts_subnano_bits) - 60usize];
    ["Offset of field: ef_vi::vi_mem_mmap_ptr"]
        [::std::mem::offset_of!(ef_vi, vi_mem_mmap_ptr) - 64usize];
    ["Offset of field: ef_vi::vi_mem_mmap_bytes"]
        [::std::mem::offset_of!(ef_vi, vi_mem_mmap_bytes) - 72usize];
    ["Offset of field: ef_vi::vi_io_mmap_ptr"]
        [::std::mem::offset_of!(ef_vi, vi_io_mmap_ptr) - 80usize];
    ["Offset of field: ef_vi::vi_io_mmap_bytes"]
        [::std::mem::offset_of!(ef_vi, vi_io_mmap_bytes) - 88usize];
    ["Offset of field: ef_vi::vi_ctpio_mmap_ptr"]
        [::std::mem::offset_of!(ef_vi, vi_ctpio_mmap_ptr) - 96usize];
    ["Offset of field: ef_vi::vi_ctpio_wb_ticks"]
        [::std::mem::offset_of!(ef_vi, vi_ctpio_wb_ticks) - 104usize];
    ["Offset of field: ef_vi::vi_rx_post_buffer_mmap_ptr"]
        [::std::mem::offset_of!(ef_vi, vi_rx_post_buffer_mmap_ptr) - 112usize];
    ["Offset of field: ef_vi::vi_rx_post_buffer_mmap_bytes"]
        [::std::mem::offset_of!(ef_vi, vi_rx_post_buffer_mmap_bytes) - 120usize];
    ["Offset of field: ef_vi::ep_state_bytes"]
        [::std::mem::offset_of!(ef_vi, ep_state_bytes) - 124usize];
    ["Offset of field: ef_vi::vi_clustered"]
        [::std::mem::offset_of!(ef_vi, vi_clustered) - 128usize];
    ["Offset of field: ef_vi::vi_is_packed_stream"]
        [::std::mem::offset_of!(ef_vi, vi_is_packed_stream) - 132usize];
    ["Offset of field: ef_vi::vi_is_normal"]
        [::std::mem::offset_of!(ef_vi, vi_is_normal) - 136usize];
    ["Offset of field: ef_vi::vi_ps_buf_size"]
        [::std::mem::offset_of!(ef_vi, vi_ps_buf_size) - 140usize];
    ["Offset of field: ef_vi::io"][::std::mem::offset_of!(ef_vi, io) - 144usize];
    ["Offset of field: ef_vi::linked_pio"][::std::mem::offset_of!(ef_vi, linked_pio) - 152usize];
    ["Offset of field: ef_vi::evq_base"][::std::mem::offset_of!(ef_vi, evq_base) - 160usize];
    ["Offset of field: ef_vi::evq_mask"][::std::mem::offset_of!(ef_vi, evq_mask) - 168usize];
    ["Offset of field: ef_vi::evq_phase_bits"]
        [::std::mem::offset_of!(ef_vi, evq_phase_bits) - 172usize];
    ["Offset of field: ef_vi::timer_quantum_ns"]
        [::std::mem::offset_of!(ef_vi, timer_quantum_ns) - 176usize];
    ["Offset of field: ef_vi::tx_push_thresh"]
        [::std::mem::offset_of!(ef_vi, tx_push_thresh) - 180usize];
    ["Offset of field: ef_vi::vi_txq"][::std::mem::offset_of!(ef_vi, vi_txq) - 184usize];
    ["Offset of field: ef_vi::vi_rxq"][::std::mem::offset_of!(ef_vi, vi_rxq) - 224usize];
    ["Offset of field: ef_vi::ep_state"][::std::mem::offset_of!(ef_vi, ep_state) - 248usize];
    ["Offset of field: ef_vi::vi_flags"][::std::mem::offset_of!(ef_vi, vi_flags) - 256usize];
    ["Offset of field: ef_vi::vi_out_flags"]
        [::std::mem::offset_of!(ef_vi, vi_out_flags) - 260usize];
    ["Offset of field: ef_vi::vi_stats"][::std::mem::offset_of!(ef_vi, vi_stats) - 264usize];
    ["Offset of field: ef_vi::vi_qs"][::std::mem::offset_of!(ef_vi, vi_qs) - 272usize];
    ["Offset of field: ef_vi::vi_qs_n"][::std::mem::offset_of!(ef_vi, vi_qs_n) - 528usize];
    ["Offset of field: ef_vi::future_qid"][::std::mem::offset_of!(ef_vi, future_qid) - 532usize];
    ["Offset of field: ef_vi::efct_rxqs"][::std::mem::offset_of!(ef_vi, efct_rxqs) - 536usize];
    ["Offset of field: ef_vi::tx_alt_num"][::std::mem::offset_of!(ef_vi, tx_alt_num) - 896usize];
    ["Offset of field: ef_vi::tx_alt_id2hw"]
        [::std::mem::offset_of!(ef_vi, tx_alt_id2hw) - 904usize];
    ["Offset of field: ef_vi::tx_alt_hw2id"]
        [::std::mem::offset_of!(ef_vi, tx_alt_hw2id) - 912usize];
    ["Offset of field: ef_vi::nic_type"][::std::mem::offset_of!(ef_vi, nic_type) - 920usize];
    ["Offset of field: ef_vi::xdp_kick"][::std::mem::offset_of!(ef_vi, xdp_kick) - 928usize];
    ["Offset of field: ef_vi::xdp_kick_context"]
        [::std::mem::offset_of!(ef_vi, xdp_kick_context) - 936usize];
    ["Offset of field: ef_vi::unsol_credit_seq_mask"]
        [::std::mem::offset_of!(ef_vi, unsol_credit_seq_mask) - 944usize];
    ["Offset of field: ef_vi::ops"][::std::mem::offset_of!(ef_vi, ops) - 952usize];
    ["Offset of field: ef_vi::internal_ops"]
        [::std::mem::offset_of!(ef_vi, internal_ops) - 1208usize];
};
unsafe extern "C" {
    pub fn ef_vi_version_str() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ef_vi_driver_interface_str() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ef_vi_receive_post(
        vi: *mut ef_vi,
        addr: ef_addr,
        dma_id: ef_request_id,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_receive_get_timestamp(
        vi: *mut ef_vi,
        pkt: *const ::std::os::raw::c_void,
        ts_out: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_receive_get_timestamp_with_sync_flags(
        vi: *mut ef_vi,
        pkt: *const ::std::os::raw::c_void,
        ts_out: *mut timespec,
        flags_out: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_receive_get_bytes(
        vi: *mut ef_vi,
        pkt: *const ::std::os::raw::c_void,
        bytes_out: *mut u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_receive_get_user_data(
        vi: *mut ef_vi,
        pkt: *const ::std::os::raw::c_void,
        user_mark: *mut u32,
        user_flag: *mut u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_receive_unbundle(
        ep: *mut ef_vi,
        event: *const ef_event,
        ids: *mut ef_request_id,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_rxq_next_desc_id(vi: *mut ef_vi) -> ef_request_id;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_init(
        vi: *mut ef_vi,
        addr: ef_addr,
        bytes: ::std::os::raw::c_int,
        dma_id: ef_request_id,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_transmitv_init_extra(
        arg1: *mut ef_vi,
        arg2: *const ef_vi_tx_extra,
        arg3: *const ef_remote_iovec,
        iov_len: ::std::os::raw::c_int,
        arg4: ef_request_id,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_init_undo(vi: *mut ef_vi);
}
unsafe extern "C" {
    pub fn ef_vi_transmit_unbundle(
        ep: *mut ef_vi,
        event: *const ef_event,
        ids: *mut ef_request_id,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_alt_num_ids(vi: *mut ef_vi) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_alt_query_overhead(
        vi: *mut ef_vi,
        params: *mut ef_vi_transmit_alt_overhead,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_set_tx_push_threshold(vi: *mut ef_vi, threshold: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn ef_eventq_capacity(vi: *mut ef_vi) -> ::std::os::raw::c_int;
}
pub const ef_vi_layout_type_EF_VI_LAYOUT_FRAME: ef_vi_layout_type = 0;
pub const ef_vi_layout_type_EF_VI_LAYOUT_MINOR_TICKS: ef_vi_layout_type = 1;
pub const ef_vi_layout_type_EF_VI_LAYOUT_PACKET_LENGTH: ef_vi_layout_type = 2;
pub type ef_vi_layout_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_layout_entry {
    pub evle_type: ef_vi_layout_type,
    pub evle_offset: ::std::os::raw::c_int,
    pub evle_description: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_layout_entry"][::std::mem::size_of::<ef_vi_layout_entry>() - 16usize];
    ["Alignment of ef_vi_layout_entry"][::std::mem::align_of::<ef_vi_layout_entry>() - 8usize];
    ["Offset of field: ef_vi_layout_entry::evle_type"]
        [::std::mem::offset_of!(ef_vi_layout_entry, evle_type) - 0usize];
    ["Offset of field: ef_vi_layout_entry::evle_offset"]
        [::std::mem::offset_of!(ef_vi_layout_entry, evle_offset) - 4usize];
    ["Offset of field: ef_vi_layout_entry::evle_description"]
        [::std::mem::offset_of!(ef_vi_layout_entry, evle_description) - 8usize];
};
unsafe extern "C" {
    pub fn ef_vi_receive_query_layout(
        vi: *mut ef_vi,
        layout_out: *mut *const ef_vi_layout_entry,
        layout_len_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_receive_get_discard_flags(
        vi: *mut ef_vi,
        pkt: *const ::std::os::raw::c_void,
        discard_flags: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_eventq_wait(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        current_ptr: ::std::os::raw::c_uint,
        timeout: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_driver_open(dh_out: *mut ef_driver_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_driver_close(dh: ef_driver_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_alloc_from_pd(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        pd: *mut ef_pd,
        pd_dh: ef_driver_handle,
        evq_capacity: ::std::os::raw::c_int,
        rxq_capacity: ::std::os::raw::c_int,
        txq_capacity: ::std::os::raw::c_int,
        evq_opt: *mut ef_vi,
        evq_dh: ef_driver_handle,
        flags: ef_vi_flags,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_free(vi: *mut ef_vi, nic: ef_driver_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_alt_alloc(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        num_alts: ::std::os::raw::c_int,
        buf_space: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_alt_free(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_transmit_alt_query_buffering(
        vi: *mut ef_vi,
        ifindex: ::std::os::raw::c_int,
        vi_dh: ef_driver_handle,
        n_alts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_flush(vi: *mut ef_vi, nic: ef_driver_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_pace(
        vi: *mut ef_vi,
        nic: ef_driver_handle,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_mtu(vi: *mut ef_vi, vi_dh: ef_driver_handle) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn ef_vi_get_mac(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        mac_out: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_eventq_put(
        resource_id: ::std::os::raw::c_uint,
        evq_dh: ef_driver_handle,
        ev_bits: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_set {
    pub vis_res_id: ::std::os::raw::c_uint,
    pub vis_pd: *mut ef_pd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_set"][::std::mem::size_of::<ef_vi_set>() - 16usize];
    ["Alignment of ef_vi_set"][::std::mem::align_of::<ef_vi_set>() - 8usize];
    ["Offset of field: ef_vi_set::vis_res_id"]
        [::std::mem::offset_of!(ef_vi_set, vis_res_id) - 0usize];
    ["Offset of field: ef_vi_set::vis_pd"][::std::mem::offset_of!(ef_vi_set, vis_pd) - 8usize];
};
unsafe extern "C" {
    pub fn ef_vi_set_alloc_from_pd(
        vi_set: *mut ef_vi_set,
        vi_set_dh: ef_driver_handle,
        pd: *mut ef_pd,
        pd_dh: ef_driver_handle,
        n_vis: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_set_free(
        vi_set: *mut ef_vi_set,
        vi_set_dh: ef_driver_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_alloc_from_set(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        vi_set: *mut ef_vi_set,
        vi_set_dh: ef_driver_handle,
        index_in_vi_set: ::std::os::raw::c_int,
        evq_capacity: ::std::os::raw::c_int,
        rxq_capacity: ::std::os::raw::c_int,
        txq_capacity: ::std::os::raw::c_int,
        evq_opt: *mut ef_vi,
        evq_dh: ef_driver_handle,
        flags: ef_vi_flags,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_prime(
        vi: *mut ef_vi,
        dh: ef_driver_handle,
        current_ptr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub const ef_filter_flags_EF_FILTER_FLAG_NONE: ef_filter_flags = 0;
pub const ef_filter_flags_EF_FILTER_FLAG_MCAST_LOOP_RECEIVE: ef_filter_flags = 2;
pub const ef_filter_flags_EF_FILTER_FLAG_EXCLUSIVE_RXQ: ef_filter_flags = 4;
pub const ef_filter_flags_EF_FILTER_FLAG_SHRUB_SHARED: ef_filter_flags = 8;
pub type ef_filter_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_filter_spec {
    pub type_: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
    pub data: [::std::os::raw::c_uint; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_filter_spec"][::std::mem::size_of::<ef_filter_spec>() - 56usize];
    ["Alignment of ef_filter_spec"][::std::mem::align_of::<ef_filter_spec>() - 4usize];
    ["Offset of field: ef_filter_spec::type_"]
        [::std::mem::offset_of!(ef_filter_spec, type_) - 0usize];
    ["Offset of field: ef_filter_spec::flags"]
        [::std::mem::offset_of!(ef_filter_spec, flags) - 4usize];
    ["Offset of field: ef_filter_spec::data"]
        [::std::mem::offset_of!(ef_filter_spec, data) - 8usize];
};
pub const EF_FILTER_VLAN_ID_ANY: _bindgen_ty_4 = -1;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_filter_cookie {
    pub filter_id: ::std::os::raw::c_int,
    pub filter_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_filter_cookie"][::std::mem::size_of::<ef_filter_cookie>() - 8usize];
    ["Alignment of ef_filter_cookie"][::std::mem::align_of::<ef_filter_cookie>() - 4usize];
    ["Offset of field: ef_filter_cookie::filter_id"]
        [::std::mem::offset_of!(ef_filter_cookie, filter_id) - 0usize];
    ["Offset of field: ef_filter_cookie::filter_type"]
        [::std::mem::offset_of!(ef_filter_cookie, filter_type) - 4usize];
};
unsafe extern "C" {
    pub fn ef_filter_spec_init(filter_spec: *mut ef_filter_spec, flags: ef_filter_flags);
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_ip4_local(
        filter_spec: *mut ef_filter_spec,
        protocol: ::std::os::raw::c_int,
        host_be32: ::std::os::raw::c_uint,
        port_be16: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_ip4_full(
        filter_spec: *mut ef_filter_spec,
        protocol: ::std::os::raw::c_int,
        host_be32: ::std::os::raw::c_uint,
        port_be16: ::std::os::raw::c_int,
        rhost_be32: ::std::os::raw::c_uint,
        rport_be16: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_ip6_local(
        filter_spec: *mut ef_filter_spec,
        protocol: ::std::os::raw::c_int,
        host: *const in6_addr,
        port_be16: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_ip6_full(
        filter_spec: *mut ef_filter_spec,
        protocol: ::std::os::raw::c_int,
        host: *const in6_addr,
        port_be16: ::std::os::raw::c_int,
        rhost: *const in6_addr,
        rport_be16: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_vlan(
        filter_spec: *mut ef_filter_spec,
        vlan_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_eth_local(
        filter_spec: *mut ef_filter_spec,
        vlan_id: ::std::os::raw::c_int,
        mac: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_unicast_all(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_multicast_all(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_unicast_mismatch(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_multicast_mismatch(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_port_sniff(
        filter_spec: *mut ef_filter_spec,
        promiscuous: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_tx_port_sniff(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_block_kernel(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_block_kernel_multicast(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_eth_type(
        filter_spec: *mut ef_filter_spec,
        ether_type_be16: u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_ip_proto(
        filter_spec: *mut ef_filter_spec,
        ip_proto: u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_user_mark(
        filter_spec: *mut ef_filter_spec,
        user_mark: u32,
        bitwise_or: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_user_flag(
        filter_spec: *mut ef_filter_spec,
        user_flag: u8,
        bitwise_or: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_block_kernel_unicast(
        filter_spec: *mut ef_filter_spec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_filter_spec_set_dest(
        filter_spec: *mut ef_filter_spec,
        dest: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_filter_add(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        filter_spec: *const ef_filter_spec,
        filter_cookie_out: *mut ef_filter_cookie,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_filter_del(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        filter_cookie: *mut ef_filter_cookie,
    ) -> ::std::os::raw::c_int;
}
pub const ef_filter_info_fields_EF_FILTER_FIELD_ID: ef_filter_info_fields = 1;
pub const ef_filter_info_fields_EF_FILTER_FIELD_QUEUE: ef_filter_info_fields = 2;
pub type ef_filter_info_fields = ::std::os::raw::c_uint;
pub const ef_filter_info_flags_EF_FILTER_IS_EXCLUSIVE: ef_filter_info_flags = 4;
pub type ef_filter_info_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_filter_info {
    pub valid_fields: u64,
    pub flags: ::std::os::raw::c_uint,
    pub filter_id: ::std::os::raw::c_uint,
    pub q_id: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_filter_info"][::std::mem::size_of::<ef_filter_info>() - 24usize];
    ["Alignment of ef_filter_info"][::std::mem::align_of::<ef_filter_info>() - 8usize];
    ["Offset of field: ef_filter_info::valid_fields"]
        [::std::mem::offset_of!(ef_filter_info, valid_fields) - 0usize];
    ["Offset of field: ef_filter_info::flags"]
        [::std::mem::offset_of!(ef_filter_info, flags) - 8usize];
    ["Offset of field: ef_filter_info::filter_id"]
        [::std::mem::offset_of!(ef_filter_info, filter_id) - 12usize];
    ["Offset of field: ef_filter_info::q_id"]
        [::std::mem::offset_of!(ef_filter_info, q_id) - 16usize];
};
unsafe extern "C" {
    pub fn ef_vi_filter_query(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        filter_cookie: *const ef_filter_cookie,
        filter_info: *mut ef_filter_info,
        filter_info_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_set_filter_add(
        vi_set: *mut ef_vi_set,
        vi_set_dh: ef_driver_handle,
        filter_spec: *const ef_filter_spec,
        filter_cookie_out: *mut ef_filter_cookie,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_set_filter_del(
        vi_set: *mut ef_vi_set,
        vi_set_dh: ef_driver_handle,
        filter_cookie: *mut ef_filter_cookie,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_vi_stats_field_layout {
    pub evsfl_name: *mut ::std::os::raw::c_char,
    pub evsfl_offset: ::std::os::raw::c_int,
    pub evsfl_size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_stats_field_layout"]
        [::std::mem::size_of::<ef_vi_stats_field_layout>() - 16usize];
    ["Alignment of ef_vi_stats_field_layout"]
        [::std::mem::align_of::<ef_vi_stats_field_layout>() - 8usize];
    ["Offset of field: ef_vi_stats_field_layout::evsfl_name"]
        [::std::mem::offset_of!(ef_vi_stats_field_layout, evsfl_name) - 0usize];
    ["Offset of field: ef_vi_stats_field_layout::evsfl_offset"]
        [::std::mem::offset_of!(ef_vi_stats_field_layout, evsfl_offset) - 8usize];
    ["Offset of field: ef_vi_stats_field_layout::evsfl_size"]
        [::std::mem::offset_of!(ef_vi_stats_field_layout, evsfl_size) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct ef_vi_stats_layout {
    pub evsl_data_size: ::std::os::raw::c_int,
    pub evsl_fields_num: ::std::os::raw::c_int,
    pub evsl_fields: __IncompleteArrayField<ef_vi_stats_field_layout>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_vi_stats_layout"][::std::mem::size_of::<ef_vi_stats_layout>() - 8usize];
    ["Alignment of ef_vi_stats_layout"][::std::mem::align_of::<ef_vi_stats_layout>() - 8usize];
    ["Offset of field: ef_vi_stats_layout::evsl_data_size"]
        [::std::mem::offset_of!(ef_vi_stats_layout, evsl_data_size) - 0usize];
    ["Offset of field: ef_vi_stats_layout::evsl_fields_num"]
        [::std::mem::offset_of!(ef_vi_stats_layout, evsl_fields_num) - 4usize];
    ["Offset of field: ef_vi_stats_layout::evsl_fields"]
        [::std::mem::offset_of!(ef_vi_stats_layout, evsl_fields) - 8usize];
};
unsafe extern "C" {
    pub fn ef_vi_stats_query_layout(
        vi: *mut ef_vi,
        layout_out: *mut *const ef_vi_stats_layout,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_stats_query(
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
        data: *mut ::std::os::raw::c_void,
        do_reset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const ef_pd_flags_EF_PD_DEFAULT: ef_pd_flags = 0;
pub const ef_pd_flags_EF_PD_VF: ef_pd_flags = 1;
pub const ef_pd_flags_EF_PD_PHYS_MODE: ef_pd_flags = 2;
pub const ef_pd_flags_EF_PD_RX_PACKED_STREAM: ef_pd_flags = 4;
pub const ef_pd_flags_EF_PD_VPORT: ef_pd_flags = 8;
pub const ef_pd_flags_EF_PD_MCAST_LOOP: ef_pd_flags = 16;
pub const ef_pd_flags_EF_PD_MEMREG_64KiB: ef_pd_flags = 32;
pub const ef_pd_flags_EF_PD_IGNORE_BLACKLIST: ef_pd_flags = 64;
pub const ef_pd_flags_EF_PD_LLCT: ef_pd_flags = 128;
pub type ef_pd_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_pd {
    pub pd_flags: ef_pd_flags,
    pub pd_resource_id: ::std::os::raw::c_uint,
    pub pd_intf_name: *mut ::std::os::raw::c_char,
    pub pd_cluster_name: *mut ::std::os::raw::c_char,
    pub pd_cluster_sock: ::std::os::raw::c_int,
    pub pd_cluster_dh: ef_driver_handle,
    pub pd_cluster_viset_resource_id: ::std::os::raw::c_uint,
    pub pd_cluster_viset_index: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_pd"][::std::mem::size_of::<ef_pd>() - 40usize];
    ["Alignment of ef_pd"][::std::mem::align_of::<ef_pd>() - 8usize];
    ["Offset of field: ef_pd::pd_flags"][::std::mem::offset_of!(ef_pd, pd_flags) - 0usize];
    ["Offset of field: ef_pd::pd_resource_id"]
        [::std::mem::offset_of!(ef_pd, pd_resource_id) - 4usize];
    ["Offset of field: ef_pd::pd_intf_name"][::std::mem::offset_of!(ef_pd, pd_intf_name) - 8usize];
    ["Offset of field: ef_pd::pd_cluster_name"]
        [::std::mem::offset_of!(ef_pd, pd_cluster_name) - 16usize];
    ["Offset of field: ef_pd::pd_cluster_sock"]
        [::std::mem::offset_of!(ef_pd, pd_cluster_sock) - 24usize];
    ["Offset of field: ef_pd::pd_cluster_dh"]
        [::std::mem::offset_of!(ef_pd, pd_cluster_dh) - 28usize];
    ["Offset of field: ef_pd::pd_cluster_viset_resource_id"]
        [::std::mem::offset_of!(ef_pd, pd_cluster_viset_resource_id) - 32usize];
    ["Offset of field: ef_pd::pd_cluster_viset_index"]
        [::std::mem::offset_of!(ef_pd, pd_cluster_viset_index) - 36usize];
};
unsafe extern "C" {
    pub fn ef_pd_alloc(
        pd: *mut ef_pd,
        pd_dh: ef_driver_handle,
        ifindex: ::std::os::raw::c_int,
        flags: ef_pd_flags,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pd_alloc_by_name(
        pd: *mut ef_pd,
        pd_dh: ef_driver_handle,
        cluster_or_intf_name: *const ::std::os::raw::c_char,
        flags: ef_pd_flags,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pd_alloc_with_vport(
        pd: *mut ef_pd,
        pd_dh: ef_driver_handle,
        intf_name: *const ::std::os::raw::c_char,
        flags: ef_pd_flags,
        vlan_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pd_interface_name(pd: *mut ef_pd) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ef_pd_free(pd: *mut ef_pd, pd_dh: ef_driver_handle) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_pio {
    pub pio_buffer: *mut u8,
    pub pio_io: *mut u8,
    pub pio_resource_id: ::std::os::raw::c_uint,
    pub pio_len: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_pio"][::std::mem::size_of::<ef_pio>() - 24usize];
    ["Alignment of ef_pio"][::std::mem::align_of::<ef_pio>() - 8usize];
    ["Offset of field: ef_pio::pio_buffer"][::std::mem::offset_of!(ef_pio, pio_buffer) - 0usize];
    ["Offset of field: ef_pio::pio_io"][::std::mem::offset_of!(ef_pio, pio_io) - 8usize];
    ["Offset of field: ef_pio::pio_resource_id"]
        [::std::mem::offset_of!(ef_pio, pio_resource_id) - 16usize];
    ["Offset of field: ef_pio::pio_len"][::std::mem::offset_of!(ef_pio, pio_len) - 20usize];
};
unsafe extern "C" {
    pub fn ef_pio_alloc(
        pio: *mut ef_pio,
        pio_dh: ef_driver_handle,
        pd: *mut ef_pd,
        len_hint: ::std::os::raw::c_uint,
        pd_dh: ef_driver_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_vi_get_pio_size(vi: *mut ef_vi) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pio_free(pio: *mut ef_pio, pio_dh: ef_driver_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pio_link_vi(
        pio: *mut ef_pio,
        pio_dh: ef_driver_handle,
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pio_unlink_vi(
        pio: *mut ef_pio,
        pio_dh: ef_driver_handle,
        vi: *mut ef_vi,
        vi_dh: ef_driver_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_pio_memcpy(
        vi: *mut ef_vi,
        base: *const ::std::os::raw::c_void,
        offset: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ef_memreg {
    pub mr_dma_addrs: *mut ef_addr,
    pub mr_dma_addrs_base: *mut ef_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ef_memreg"][::std::mem::size_of::<ef_memreg>() - 16usize];
    ["Alignment of ef_memreg"][::std::mem::align_of::<ef_memreg>() - 8usize];
    ["Offset of field: ef_memreg::mr_dma_addrs"]
        [::std::mem::offset_of!(ef_memreg, mr_dma_addrs) - 0usize];
    ["Offset of field: ef_memreg::mr_dma_addrs_base"]
        [::std::mem::offset_of!(ef_memreg, mr_dma_addrs_base) - 8usize];
};
unsafe extern "C" {
    pub fn ef_memreg_alloc(
        mr: *mut ef_memreg,
        mr_dh: ef_driver_handle,
        pd: *mut ef_pd,
        pd_dh: ef_driver_handle,
        p_mem: *mut ::std::os::raw::c_void,
        len_bytes: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ef_memreg_free(mr: *mut ef_memreg, mr_dh: ef_driver_handle) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zf_stack {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zf_attr {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn zf_init() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_deinit() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_stack_alloc(
        attr: *mut zf_attr,
        stack_out: *mut *mut zf_stack,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_stack_free(stack: *mut zf_stack) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zf_waitable {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn zf_stack_to_waitable(arg1: *mut zf_stack) -> *mut zf_waitable;
}
unsafe extern "C" {
    pub fn zf_stack_is_quiescent(arg1: *mut zf_stack) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_version() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn zf_version_short() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn onload_version_short() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn zf_print_version();
}
pub const zf_stack_feature_CTPIO: zf_stack_feature = 0;
pub const zf_stack_feature_PIO: zf_stack_feature = 1;
pub type zf_stack_feature = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn zf_stack_query_feature(
        stack: *mut zf_stack,
        feature: zf_stack_feature,
    ) -> ::std::os::raw::c_int;
}
pub const EPOLL_CLOEXEC: _bindgen_ty_5 = 524288;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const EPOLL_EVENTS_EPOLLIN: EPOLL_EVENTS = 1;
pub const EPOLL_EVENTS_EPOLLPRI: EPOLL_EVENTS = 2;
pub const EPOLL_EVENTS_EPOLLOUT: EPOLL_EVENTS = 4;
pub const EPOLL_EVENTS_EPOLLRDNORM: EPOLL_EVENTS = 64;
pub const EPOLL_EVENTS_EPOLLRDBAND: EPOLL_EVENTS = 128;
pub const EPOLL_EVENTS_EPOLLWRNORM: EPOLL_EVENTS = 256;
pub const EPOLL_EVENTS_EPOLLWRBAND: EPOLL_EVENTS = 512;
pub const EPOLL_EVENTS_EPOLLMSG: EPOLL_EVENTS = 1024;
pub const EPOLL_EVENTS_EPOLLERR: EPOLL_EVENTS = 8;
pub const EPOLL_EVENTS_EPOLLHUP: EPOLL_EVENTS = 16;
pub const EPOLL_EVENTS_EPOLLRDHUP: EPOLL_EVENTS = 8192;
pub const EPOLL_EVENTS_EPOLLEXCLUSIVE: EPOLL_EVENTS = 268435456;
pub const EPOLL_EVENTS_EPOLLWAKEUP: EPOLL_EVENTS = 536870912;
pub const EPOLL_EVENTS_EPOLLONESHOT: EPOLL_EVENTS = 1073741824;
pub const EPOLL_EVENTS_EPOLLET: EPOLL_EVENTS = 2147483648;
pub type EPOLL_EVENTS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union epoll_data {
    pub ptr: *mut ::std::os::raw::c_void,
    pub fd: ::std::os::raw::c_int,
    pub u32_: u32,
    pub u64_: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of epoll_data"][::std::mem::size_of::<epoll_data>() - 8usize];
    ["Alignment of epoll_data"][::std::mem::align_of::<epoll_data>() - 8usize];
    ["Offset of field: epoll_data::ptr"][::std::mem::offset_of!(epoll_data, ptr) - 0usize];
    ["Offset of field: epoll_data::fd"][::std::mem::offset_of!(epoll_data, fd) - 0usize];
    ["Offset of field: epoll_data::u32_"][::std::mem::offset_of!(epoll_data, u32_) - 0usize];
    ["Offset of field: epoll_data::u64_"][::std::mem::offset_of!(epoll_data, u64_) - 0usize];
};
pub type epoll_data_t = epoll_data;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct epoll_event {
    pub events: u32,
    pub data: epoll_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of epoll_event"][::std::mem::size_of::<epoll_event>() - 12usize];
    ["Alignment of epoll_event"][::std::mem::align_of::<epoll_event>() - 1usize];
    ["Offset of field: epoll_event::events"][::std::mem::offset_of!(epoll_event, events) - 0usize];
    ["Offset of field: epoll_event::data"][::std::mem::offset_of!(epoll_event, data) - 4usize];
};
unsafe extern "C" {
    pub fn epoll_create(__size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn epoll_create1(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn epoll_ctl(
        __epfd: ::std::os::raw::c_int,
        __op: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __event: *mut epoll_event,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn epoll_wait(
        __epfd: ::std::os::raw::c_int,
        __events: *mut epoll_event,
        __maxevents: ::std::os::raw::c_int,
        __timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn epoll_pwait(
        __epfd: ::std::os::raw::c_int,
        __events: *mut epoll_event,
        __maxevents: ::std::os::raw::c_int,
        __timeout: ::std::os::raw::c_int,
        __ss: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zf_muxer_set {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn zf_muxer_alloc(
        stack: *mut zf_stack,
        muxer_out: *mut *mut zf_muxer_set,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_muxer_free(muxer: *mut zf_muxer_set);
}
unsafe extern "C" {
    pub fn zf_muxer_add(
        muxer: *mut zf_muxer_set,
        w: *mut zf_waitable,
        event: *const epoll_event,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_muxer_mod(w: *mut zf_waitable, event: *const epoll_event) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_muxer_del(w: *mut zf_waitable) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_muxer_wait(
        muxer: *mut zf_muxer_set,
        events: *mut epoll_event,
        maxevents: ::std::os::raw::c_int,
        timeout_ns: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_waitable_event(w: *mut zf_waitable) -> *const epoll_event;
}
unsafe extern "C" {
    pub fn zf_waitable_fd_get(
        stack: *mut zf_stack,
        fd: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_waitable_fd_prime(stack: *mut zf_stack) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_alloc(attr_out: *mut *mut zf_attr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_free(attr: *mut zf_attr);
}
unsafe extern "C" {
    pub fn zf_attr_reset(attr: *mut zf_attr);
}
unsafe extern "C" {
    pub fn zf_attr_set_int(
        attr: *mut zf_attr,
        name: *const ::std::os::raw::c_char,
        val: i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_get_int(
        attr: *mut zf_attr,
        name: *const ::std::os::raw::c_char,
        val: *mut i64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_set_str(
        attr: *mut zf_attr,
        name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_get_str(
        attr: *mut zf_attr,
        name: *const ::std::os::raw::c_char,
        val: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_set_from_str(
        attr: *mut zf_attr,
        name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_set_from_fmt(
        attr: *mut zf_attr,
        name: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_attr_dup(attr: *const zf_attr) -> *mut zf_attr;
}
unsafe extern "C" {
    pub fn zf_attr_doc(
        attr_name_opt: *const ::std::os::raw::c_char,
        docs_out: *mut *mut *const ::std::os::raw::c_char,
        docs_len_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
pub const MSG_OOB: _bindgen_ty_6 = 1;
pub const MSG_PEEK: _bindgen_ty_6 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_6 = 4;
pub const MSG_CTRUNC: _bindgen_ty_6 = 8;
pub const MSG_PROXY: _bindgen_ty_6 = 16;
pub const MSG_TRUNC: _bindgen_ty_6 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_6 = 64;
pub const MSG_EOR: _bindgen_ty_6 = 128;
pub const MSG_WAITALL: _bindgen_ty_6 = 256;
pub const MSG_FIN: _bindgen_ty_6 = 512;
pub const MSG_SYN: _bindgen_ty_6 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_6 = 2048;
pub const MSG_RST: _bindgen_ty_6 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_6 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_6 = 16384;
pub const MSG_MORE: _bindgen_ty_6 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_6 = 65536;
pub const MSG_BATCH: _bindgen_ty_6 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_6 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_6 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_6 = 1073741824;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
unsafe extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub const SHUT_RD: _bindgen_ty_8 = 0;
pub const SHUT_WR: _bindgen_ty_8 = 1;
pub const SHUT_RDWR: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
pub const IPPROTO_IP: _bindgen_ty_9 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_9 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_9 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_9 = 4;
pub const IPPROTO_TCP: _bindgen_ty_9 = 6;
pub const IPPROTO_EGP: _bindgen_ty_9 = 8;
pub const IPPROTO_PUP: _bindgen_ty_9 = 12;
pub const IPPROTO_UDP: _bindgen_ty_9 = 17;
pub const IPPROTO_IDP: _bindgen_ty_9 = 22;
pub const IPPROTO_TP: _bindgen_ty_9 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_9 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_9 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_9 = 46;
pub const IPPROTO_GRE: _bindgen_ty_9 = 47;
pub const IPPROTO_ESP: _bindgen_ty_9 = 50;
pub const IPPROTO_AH: _bindgen_ty_9 = 51;
pub const IPPROTO_MTP: _bindgen_ty_9 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_9 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_9 = 98;
pub const IPPROTO_PIM: _bindgen_ty_9 = 103;
pub const IPPROTO_COMP: _bindgen_ty_9 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_9 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_9 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_9 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_9 = 143;
pub const IPPROTO_RAW: _bindgen_ty_9 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_9 = 262;
pub const IPPROTO_MAX: _bindgen_ty_9 = 263;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_10 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_10 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_10 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_10 = 58;
pub const IPPROTO_NONE: _bindgen_ty_10 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_10 = 60;
pub const IPPROTO_MH: _bindgen_ty_10 = 135;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_11 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_11 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_11 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_11 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_11 = 15;
pub const IPPORT_FTP: _bindgen_ty_11 = 21;
pub const IPPORT_TELNET: _bindgen_ty_11 = 23;
pub const IPPORT_SMTP: _bindgen_ty_11 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_11 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_11 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_11 = 43;
pub const IPPORT_MTP: _bindgen_ty_11 = 57;
pub const IPPORT_TFTP: _bindgen_ty_11 = 69;
pub const IPPORT_RJE: _bindgen_ty_11 = 77;
pub const IPPORT_FINGER: _bindgen_ty_11 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_11 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_11 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_11 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_11 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_11 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_11 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_11 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_11 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_11 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_11 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_11 = 5000;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__in6_u"][::std::mem::offset_of!(in6_addr, __in6_u) - 0usize];
};
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 4usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"][::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"][::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
unsafe extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timestamp {
    pub len: u8,
    pub ptr: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub data: [u32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timestamp"][::std::mem::size_of::<timestamp>() - 40usize];
    ["Alignment of timestamp"][::std::mem::align_of::<timestamp>() - 4usize];
    ["Offset of field: timestamp::len"][::std::mem::offset_of!(timestamp, len) - 0usize];
    ["Offset of field: timestamp::ptr"][::std::mem::offset_of!(timestamp, ptr) - 1usize];
    ["Offset of field: timestamp::data"][::std::mem::offset_of!(timestamp, data) - 4usize];
};
impl timestamp {
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overflow(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_overflow(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overflow_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overflow_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: ::std::os::raw::c_uint,
        overflow: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let overflow: u32 = unsafe { ::std::mem::transmute(overflow) };
            overflow as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iphdr {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub tos: u8,
    pub tot_len: u16,
    pub id: u16,
    pub frag_off: u16,
    pub ttl: u8,
    pub protocol: u8,
    pub check: u16,
    pub saddr: u32,
    pub daddr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iphdr"][::std::mem::size_of::<iphdr>() - 20usize];
    ["Alignment of iphdr"][::std::mem::align_of::<iphdr>() - 4usize];
    ["Offset of field: iphdr::tos"][::std::mem::offset_of!(iphdr, tos) - 1usize];
    ["Offset of field: iphdr::tot_len"][::std::mem::offset_of!(iphdr, tot_len) - 2usize];
    ["Offset of field: iphdr::id"][::std::mem::offset_of!(iphdr, id) - 4usize];
    ["Offset of field: iphdr::frag_off"][::std::mem::offset_of!(iphdr, frag_off) - 6usize];
    ["Offset of field: iphdr::ttl"][::std::mem::offset_of!(iphdr, ttl) - 8usize];
    ["Offset of field: iphdr::protocol"][::std::mem::offset_of!(iphdr, protocol) - 9usize];
    ["Offset of field: iphdr::check"][::std::mem::offset_of!(iphdr, check) - 10usize];
    ["Offset of field: iphdr::saddr"][::std::mem::offset_of!(iphdr, saddr) - 12usize];
    ["Offset of field: iphdr::daddr"][::std::mem::offset_of!(iphdr, daddr) - 16usize];
};
impl iphdr {
    #[inline]
    pub fn ihl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ihl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ihl_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ihl_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn version_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_version_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ihl: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ihl: u32 = unsafe { ::std::mem::transmute(ihl) };
            ihl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub ip_tos: u8,
    pub ip_len: ::std::os::raw::c_ushort,
    pub ip_id: ::std::os::raw::c_ushort,
    pub ip_off: ::std::os::raw::c_ushort,
    pub ip_ttl: u8,
    pub ip_p: u8,
    pub ip_sum: ::std::os::raw::c_ushort,
    pub ip_src: in_addr,
    pub ip_dst: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip"][::std::mem::size_of::<ip>() - 20usize];
    ["Alignment of ip"][::std::mem::align_of::<ip>() - 4usize];
    ["Offset of field: ip::ip_tos"][::std::mem::offset_of!(ip, ip_tos) - 1usize];
    ["Offset of field: ip::ip_len"][::std::mem::offset_of!(ip, ip_len) - 2usize];
    ["Offset of field: ip::ip_id"][::std::mem::offset_of!(ip, ip_id) - 4usize];
    ["Offset of field: ip::ip_off"][::std::mem::offset_of!(ip, ip_off) - 6usize];
    ["Offset of field: ip::ip_ttl"][::std::mem::offset_of!(ip, ip_ttl) - 8usize];
    ["Offset of field: ip::ip_p"][::std::mem::offset_of!(ip, ip_p) - 9usize];
    ["Offset of field: ip::ip_sum"][::std::mem::offset_of!(ip, ip_sum) - 10usize];
    ["Offset of field: ip::ip_src"][::std::mem::offset_of!(ip, ip_src) - 12usize];
    ["Offset of field: ip::ip_dst"][::std::mem::offset_of!(ip, ip_dst) - 16usize];
};
impl ip {
    #[inline]
    pub fn ip_hl(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_hl(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ip_hl_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ip_hl_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ip_v(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ip_v(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ip_v_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ip_v_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ip_hl: ::std::os::raw::c_uint,
        ip_v: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ip_hl: u32 = unsafe { ::std::mem::transmute(ip_hl) };
            ip_hl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ip_v: u32 = unsafe { ::std::mem::transmute(ip_v) };
            ip_v as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_timestamp {
    pub ipt_code: u8,
    pub ipt_len: u8,
    pub ipt_ptr: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub data: [u32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_timestamp"][::std::mem::size_of::<ip_timestamp>() - 40usize];
    ["Alignment of ip_timestamp"][::std::mem::align_of::<ip_timestamp>() - 4usize];
    ["Offset of field: ip_timestamp::ipt_code"]
        [::std::mem::offset_of!(ip_timestamp, ipt_code) - 0usize];
    ["Offset of field: ip_timestamp::ipt_len"]
        [::std::mem::offset_of!(ip_timestamp, ipt_len) - 1usize];
    ["Offset of field: ip_timestamp::ipt_ptr"]
        [::std::mem::offset_of!(ip_timestamp, ipt_ptr) - 2usize];
    ["Offset of field: ip_timestamp::data"][::std::mem::offset_of!(ip_timestamp, data) - 4usize];
};
impl ip_timestamp {
    #[inline]
    pub fn ipt_flg(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_flg(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ipt_flg_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ipt_flg_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ipt_oflw(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_ipt_oflw(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ipt_oflw_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ipt_oflw_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ipt_flg: ::std::os::raw::c_uint,
        ipt_oflw: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ipt_flg: u32 = unsafe { ::std::mem::transmute(ipt_flg) };
            ipt_flg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ipt_oflw: u32 = unsafe { ::std::mem::transmute(ipt_oflw) };
            ipt_oflw as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct udphdr {
    pub __bindgen_anon_1: udphdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union udphdr__bindgen_ty_1 {
    pub __bindgen_anon_1: udphdr__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: udphdr__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udphdr__bindgen_ty_1__bindgen_ty_1 {
    pub uh_sport: u16,
    pub uh_dport: u16,
    pub uh_ulen: u16,
    pub uh_sum: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of udphdr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<udphdr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of udphdr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<udphdr__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_1::uh_sport"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_1, uh_sport) - 0usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_1::uh_dport"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_1, uh_dport) - 2usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_1::uh_ulen"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_1, uh_ulen) - 4usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_1::uh_sum"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_1, uh_sum) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udphdr__bindgen_ty_1__bindgen_ty_2 {
    pub source: u16,
    pub dest: u16,
    pub len: u16,
    pub check: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of udphdr__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<udphdr__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of udphdr__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<udphdr__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_2::source"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_2, source) - 0usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_2::dest"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_2, dest) - 2usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_2::len"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_2, len) - 4usize];
    ["Offset of field: udphdr__bindgen_ty_1__bindgen_ty_2::check"]
        [::std::mem::offset_of!(udphdr__bindgen_ty_1__bindgen_ty_2, check) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of udphdr__bindgen_ty_1"][::std::mem::size_of::<udphdr__bindgen_ty_1>() - 8usize];
    ["Alignment of udphdr__bindgen_ty_1"][::std::mem::align_of::<udphdr__bindgen_ty_1>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of udphdr"][::std::mem::size_of::<udphdr>() - 8usize];
    ["Alignment of udphdr"][::std::mem::align_of::<udphdr>() - 2usize];
};
unsafe extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zfur {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zfur"][::std::mem::size_of::<zfur>() - 0usize];
    ["Alignment of zfur"][::std::mem::align_of::<zfur>() - 1usize];
};
unsafe extern "C" {
    pub fn zfur_alloc(
        us_out: *mut *mut zfur,
        st: *mut zf_stack,
        attr: *const zf_attr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfur_free(us: *mut zfur) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfur_addr_bind(
        us: *mut zfur,
        laddr: *mut sockaddr,
        laddrlen: socklen_t,
        raddr: *const sockaddr,
        raddrlen: socklen_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfur_addr_unbind(
        us: *mut zfur,
        laddr: *const sockaddr,
        laddrlen: socklen_t,
        raddr: *const sockaddr,
        raddrlen: socklen_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct zfur_msg {
    pub reserved: [::std::os::raw::c_int; 4usize],
    pub dgrams_left: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub iovcnt: ::std::os::raw::c_int,
    pub iov: __IncompleteArrayField<iovec>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zfur_msg"][::std::mem::size_of::<zfur_msg>() - 32usize];
    ["Alignment of zfur_msg"][::std::mem::align_of::<zfur_msg>() - 8usize];
    ["Offset of field: zfur_msg::reserved"][::std::mem::offset_of!(zfur_msg, reserved) - 0usize];
    ["Offset of field: zfur_msg::dgrams_left"]
        [::std::mem::offset_of!(zfur_msg, dgrams_left) - 16usize];
    ["Offset of field: zfur_msg::flags"][::std::mem::offset_of!(zfur_msg, flags) - 20usize];
    ["Offset of field: zfur_msg::iovcnt"][::std::mem::offset_of!(zfur_msg, iovcnt) - 24usize];
    ["Offset of field: zfur_msg::iov"][::std::mem::offset_of!(zfur_msg, iov) - 32usize];
};
unsafe extern "C" {
    pub fn zfur_zc_recv(us: *mut zfur, msg: *mut zfur_msg, flags: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn zfur_zc_recv_done(us: *mut zfur, msg: *mut zfur_msg);
}
unsafe extern "C" {
    pub fn zfur_pkt_get_header(
        us: *mut zfur,
        msg: *const zfur_msg,
        iphdr: *mut *const iphdr,
        udphdr: *mut *const udphdr,
        pktind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfur_pkt_get_timestamp(
        us: *mut zfur,
        msg: *const zfur_msg,
        ts_out: *mut timespec,
        pktind: ::std::os::raw::c_int,
        flags: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfur_to_waitable(us: *mut zfur) -> *mut zf_waitable;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zfut {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zfut"][::std::mem::size_of::<zfut>() - 0usize];
    ["Alignment of zfut"][::std::mem::align_of::<zfut>() - 1usize];
};
unsafe extern "C" {
    pub fn zfut_alloc(
        us_out: *mut *mut zfut,
        st: *mut zf_stack,
        laddr: *const sockaddr,
        laddrlen: socklen_t,
        raddr: *const sockaddr,
        raddrlen: socklen_t,
        flags: ::std::os::raw::c_int,
        attr: *const zf_attr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_free(us: *mut zfut) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_get_mss(us: *mut zfut) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_send_single(
        us: *mut zfut,
        buf: *const ::std::os::raw::c_void,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_send_single_warm(
        us: *mut zfut,
        buf: *const ::std::os::raw::c_void,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_send(
        us: *mut zfut,
        iov: *const iovec,
        iov_cnt: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_get_tx_timestamps(
        us: *mut zfut,
        reports_out: *mut zf_pkt_report,
        count_in_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zfut_to_waitable(us: *mut zfut) -> *mut zf_waitable;
}
unsafe extern "C" {
    pub fn zfut_get_header_size(us: *mut zfut) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zftl {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zftl"][::std::mem::size_of::<zftl>() - 0usize];
    ["Alignment of zftl"][::std::mem::align_of::<zftl>() - 1usize];
};
unsafe extern "C" {
    pub fn zftl_listen(
        st: *mut zf_stack,
        laddr: *const sockaddr,
        laddrlen: socklen_t,
        attr: *const zf_attr,
        tl_out: *mut *mut zftl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zftl_accept(tl: *mut zftl, ts_out: *mut *mut zft) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zftl_to_waitable(tl: *mut zftl) -> *mut zf_waitable;
}
unsafe extern "C" {
    pub fn zftl_getname(ts: *mut zftl, laddr_out: *mut sockaddr, laddrlen: *mut socklen_t);
}
unsafe extern "C" {
    pub fn zftl_free(ts: *mut zftl) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zft_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zft {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zft"][::std::mem::size_of::<zft>() - 0usize];
    ["Alignment of zft"][::std::mem::align_of::<zft>() - 1usize];
};
unsafe extern "C" {
    pub fn zft_to_waitable(ts: *mut zft) -> *mut zf_waitable;
}
unsafe extern "C" {
    pub fn zft_alloc(
        st: *mut zf_stack,
        attr: *const zf_attr,
        handle_out: *mut *mut zft_handle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_handle_free(handle: *mut zft_handle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_handle_getname(
        ts: *mut zft_handle,
        laddr_out: *mut sockaddr,
        laddrlen: *mut socklen_t,
    );
}
unsafe extern "C" {
    pub fn zft_addr_bind(
        handle: *mut zft_handle,
        laddr: *const sockaddr,
        laddrlen: socklen_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_connect(
        handle: *mut zft_handle,
        raddr: *const sockaddr,
        raddrlen: socklen_t,
        ts_out: *mut *mut zft,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_shutdown_tx(ts: *mut zft) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_free(ts: *mut zft) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_state(ts: *mut zft) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_error(ts: *mut zft) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_getname(
        ts: *mut zft,
        laddr_out: *mut sockaddr,
        laddrlen: *mut socklen_t,
        raddr_out: *mut sockaddr,
        raddrlen: *mut socklen_t,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct zft_msg {
    pub reserved: [::std::os::raw::c_int; 4usize],
    pub pkts_left: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub iovcnt: ::std::os::raw::c_int,
    pub iov: __IncompleteArrayField<iovec>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zft_msg"][::std::mem::size_of::<zft_msg>() - 32usize];
    ["Alignment of zft_msg"][::std::mem::align_of::<zft_msg>() - 8usize];
    ["Offset of field: zft_msg::reserved"][::std::mem::offset_of!(zft_msg, reserved) - 0usize];
    ["Offset of field: zft_msg::pkts_left"][::std::mem::offset_of!(zft_msg, pkts_left) - 16usize];
    ["Offset of field: zft_msg::flags"][::std::mem::offset_of!(zft_msg, flags) - 20usize];
    ["Offset of field: zft_msg::iovcnt"][::std::mem::offset_of!(zft_msg, iovcnt) - 24usize];
    ["Offset of field: zft_msg::iov"][::std::mem::offset_of!(zft_msg, iov) - 32usize];
};
unsafe extern "C" {
    pub fn zft_zc_recv(ts: *mut zft, msg: *mut zft_msg, flags: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn zft_zc_recv_done(ts: *mut zft, msg: *mut zft_msg) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_zc_recv_done_some(
        ts: *mut zft,
        msg: *mut zft_msg,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_recv(
        ts: *mut zft,
        iov: *const iovec,
        iovcnt: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_pkt_get_timestamp(
        ts: *mut zft,
        msg: *const zft_msg,
        ts_out: *mut timespec,
        pktind: ::std::os::raw::c_int,
        flags: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_send(
        ts: *mut zft,
        iov: *const iovec,
        iov_cnt: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn zft_send_single(
        ts: *mut zft,
        buf: *const ::std::os::raw::c_void,
        buflen: usize,
        flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn zft_send_single_warm(
        ts: *mut zft,
        buf: *const ::std::os::raw::c_void,
        buflen: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn zft_send_space(ts: *mut zft, space: *mut usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_get_mss(ts: *mut zft) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_get_header_size(ts: *mut zft) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn zft_get_tx_timestamps(
        ts: *mut zft,
        reports: *mut zf_pkt_report,
        count_in_out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_reactor_perform(st: *mut zf_stack) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_reactor_perform_attr(
        st: *mut zf_stack,
        attr: *const zf_attr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_stack_has_pending_work(st: *const zf_stack) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_stack_has_pending_events(st: *const zf_stack) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zf_pkt_report {
    pub timestamp: timespec,
    pub start: u32,
    pub bytes: u16,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zf_pkt_report"][::std::mem::size_of::<zf_pkt_report>() - 24usize];
    ["Alignment of zf_pkt_report"][::std::mem::align_of::<zf_pkt_report>() - 8usize];
    ["Offset of field: zf_pkt_report::timestamp"]
        [::std::mem::offset_of!(zf_pkt_report, timestamp) - 0usize];
    ["Offset of field: zf_pkt_report::start"]
        [::std::mem::offset_of!(zf_pkt_report, start) - 16usize];
    ["Offset of field: zf_pkt_report::bytes"]
        [::std::mem::offset_of!(zf_pkt_report, bytes) - 20usize];
    ["Offset of field: zf_pkt_report::flags"]
        [::std::mem::offset_of!(zf_pkt_report, flags) - 22usize];
};
pub const zf_zc_flags_ZF_OVERLAPPED_WAIT: zf_zc_flags = 65536;
pub const zf_zc_flags_ZF_OVERLAPPED_COMPLETE: zf_zc_flags = 131072;
pub type zf_zc_flags = ::std::os::raw::c_uint;
pub type zf_althandle = u64;
unsafe extern "C" {
    pub fn zf_alternatives_alloc(
        stack: *mut zf_stack,
        attr: *const zf_attr,
        alt_out: *mut zf_althandle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_alternatives_release(
        stack: *mut zf_stack,
        alt: zf_althandle,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_alternatives_send(stack: *mut zf_stack, alt: zf_althandle) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_alternatives_cancel(stack: *mut zf_stack, alt: zf_althandle)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zft_alternatives_queue(
        ts: *mut zft,
        alt: zf_althandle,
        iov: *const iovec,
        iov_cnt: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_alternatives_free_space(
        stack: *mut zf_stack,
        alt: zf_althandle,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn zf_alternatives_query_overhead_tcp(
        ts: *mut zft,
        out: *mut ef_vi_transmit_alt_overhead,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zf_ds {
    pub headers: *mut ::std::os::raw::c_void,
    pub headers_size: ::std::os::raw::c_int,
    pub headers_len: ::std::os::raw::c_int,
    pub mss: ::std::os::raw::c_int,
    pub send_wnd: ::std::os::raw::c_int,
    pub cong_wnd: ::std::os::raw::c_int,
    pub delegated_wnd: ::std::os::raw::c_int,
    pub tcp_seq_offset: ::std::os::raw::c_int,
    pub ip_len_offset: ::std::os::raw::c_int,
    pub ip_tcp_hdr_len: ::std::os::raw::c_int,
    pub reserved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zf_ds"][::std::mem::size_of::<zf_ds>() - 48usize];
    ["Alignment of zf_ds"][::std::mem::align_of::<zf_ds>() - 8usize];
    ["Offset of field: zf_ds::headers"][::std::mem::offset_of!(zf_ds, headers) - 0usize];
    ["Offset of field: zf_ds::headers_size"][::std::mem::offset_of!(zf_ds, headers_size) - 8usize];
    ["Offset of field: zf_ds::headers_len"][::std::mem::offset_of!(zf_ds, headers_len) - 12usize];
    ["Offset of field: zf_ds::mss"][::std::mem::offset_of!(zf_ds, mss) - 16usize];
    ["Offset of field: zf_ds::send_wnd"][::std::mem::offset_of!(zf_ds, send_wnd) - 20usize];
    ["Offset of field: zf_ds::cong_wnd"][::std::mem::offset_of!(zf_ds, cong_wnd) - 24usize];
    ["Offset of field: zf_ds::delegated_wnd"]
        [::std::mem::offset_of!(zf_ds, delegated_wnd) - 28usize];
    ["Offset of field: zf_ds::tcp_seq_offset"]
        [::std::mem::offset_of!(zf_ds, tcp_seq_offset) - 32usize];
    ["Offset of field: zf_ds::ip_len_offset"]
        [::std::mem::offset_of!(zf_ds, ip_len_offset) - 36usize];
    ["Offset of field: zf_ds::ip_tcp_hdr_len"]
        [::std::mem::offset_of!(zf_ds, ip_tcp_hdr_len) - 40usize];
    ["Offset of field: zf_ds::reserved"][::std::mem::offset_of!(zf_ds, reserved) - 44usize];
};
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_OK: zf_delegated_send_rc = 0;
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_NOCWIN: zf_delegated_send_rc = 1;
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_NOWIN: zf_delegated_send_rc = 2;
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_BAD_SOCKET: zf_delegated_send_rc = 131;
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_SMALL_HEADER: zf_delegated_send_rc = 132;
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_SENDQ_BUSY: zf_delegated_send_rc = 133;
pub const zf_delegated_send_rc_ZF_DELEGATED_SEND_RC_NOARP: zf_delegated_send_rc = 134;
pub type zf_delegated_send_rc = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn zf_delegated_send_prepare(
        ts: *mut zft,
        max_delegated_wnd: ::std::os::raw::c_int,
        cong_wnd_override: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        ds: *mut zf_ds,
    ) -> zf_delegated_send_rc;
}
unsafe extern "C" {
    pub fn zf_delegated_send_complete(
        ts: *mut zft,
        iov: *const iovec,
        iovlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn zf_delegated_send_cancel(ts: *mut zft) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct efab_efct_rxq_uk_shm_base {
    pub _address: u8,
}
